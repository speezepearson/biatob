syntax = "proto3";

package biatob.proto.mvp;

message UserId {
  oneof kind {
    string username = 1;
    // string oauth_google_acct = 2;
    // string oauth_facebook_acct = 3;
  }
}

message AuthToken {
  bytes hmac_of_rest = 1;
  UserId owner = 2;
  uint32 minted_unixtime = 3;
  uint32 expires_unixtime = 4;
}

// For MVP purposes, we're just gonna store the entire worldstate in a protobuf blob. "Data base"? Huh?
// TODO(P3): ^ stop doing that
message WorldState {

  map<string, UsernameInfo> username_users = 1;
  // map<string, GoogleOauthInfo> google_oauth_users = 5;
  // map<string, FacebookOauthInfo> facebook_oauth_users = 6;

  map<uint32, Market> markets = 2;

  message GenericUserInfo {
    repeated UserId trusted_users = 1;
  }
  message UsernameInfo {
    GenericUserInfo info = 1;
    bytes password_bcrypt = 2;
  }
  // message GoogleOauthInfo {
  //   GenericUserInfo info = 1;
  // }
  // message FacebookOauthInfo {
  //   GenericUserInfo info = 1;
  // }
  message Market {
    // Set upon creation, never changed
    string question = 1;
    CertaintyRange certainty = 2;
    uint32 maximum_stake_cents = 3;
    uint32 created_unixtime = 4;
    uint32 closes_unixtime = 5;
    uint32 resolves_at_unixtime = 11;
    string special_rules = 6;
    UserId creator = 7;

    // Append-only
    repeated Trade trades = 8;
    repeated ResolutionEvent resolutions = 10;
  }
}

message ResolutionEvent {
  uint32 unixtime = 1;
  Resolution resolution = 2;
  string notes = 3;
}

message Trade {
  UserId bettor = 1;
  bool bettor_is_a_skeptic = 2;
  uint32 bettor_stake_cents = 3;
  uint32 creator_stake_cents = 4;
  uint32 transacted_unixtime = 5;
}


enum Void {
  VOID = 0;
}

enum Resolution {
  RESOLUTION_NONE_YET = 0;
  RESOLUTION_YES = 1;
  RESOLUTION_NO = 2;
  RESOLUTION_INVALID = 3;
}

message WhoamiRequest {}
message WhoamiResponse {
  AuthToken auth = 1;
}

message SignOutRequest {}
message SignOutResponse {}

message RegisterUsernameRequest {
  string username = 1;
  string password = 2;
}
message RegisterUsernameResponse {
  oneof register_username_result {
    AuthToken ok = 1;
    Error error = 2;
  }
  message Error {
    string catchall = 1;
    Void username_taken = 2;
  }
}

message LogInUsernameRequest {
  string username = 1;
  string password = 2;
}
message LogInUsernameResponse {
  oneof log_in_username_result {
    AuthToken ok = 1;
    Error error = 2;
  }
  message Error {
    string catchall = 1;
  }
}

message CertaintyRange {
  float low = 1;
  float high = 2;
}
message MarketPrivacy {
  oneof privacy_kind {
    Void all_trusted_by_author = 1;
    Emails specific_users = 2;
  }
  message Emails {
    repeated string emails = 1;
  }
}
message CreateMarketRequest {
  string question = 2;
  MarketPrivacy privacy = 3;
  CertaintyRange certainty = 4;
  uint32 maximum_stake_cents = 5;
  uint32 open_seconds = 6;
  string special_rules = 7;
  uint32 resolves_at_unixtime = 8;
}
message CreateMarketResponse {
  oneof create_market_result {
    uint32 new_market_id = 1;
    Error error = 2;
  }
  message Error {
    string catchall = 1;
  }
}

message GetMarketRequest {
  uint32 market_id = 2;
}
message GetMarketResponse {
  oneof get_market_result {
    UserMarketView market = 1;
    Error error = 2;
  }
  message Error {
    string catchall = 1;
    Void no_such_market = 2;
  }
}
message UserMarketView {
  string question = 1;
  CertaintyRange certainty = 2;
  uint32 maximum_stake_cents = 3;
  uint32 remaining_stake_cents_vs_believers = 4;
  uint32 remaining_stake_cents_vs_skeptics = 5;
  uint32 created_unixtime = 6;
  uint32 closes_unixtime = 7;
  string special_rules = 8;
  UserUserView creator = 9;
  repeated ResolutionEvent resolutions = 10;
  repeated Trade your_trades = 11;
  uint32 resolves_at_unixtime = 12;
}
message UserUserView {
  string display_name = 1;
  bool is_self = 2;
  bool is_trusted = 3;
  bool trusts_you = 4;
}

message ListMyMarketsRequest {
}
message ListMyMarketsResponse {
  oneof list_my_markets_result {
    MarketsById ok = 1;
    Error error = 2;
  }
  message Error {
    string catchall = 1;
    Void no_such_market = 2;
  }
}
message MarketsById {
  map<uint32, UserMarketView> markets = 1;
}

message StakeRequest {
  uint32 market_id = 2;
  bool bettor_is_a_skeptic = 3;
  uint32 bettor_stake_cents = 4;
}
message StakeResponse {
  oneof stake_result {
    Void ok = 1;
    Error error = 2;
  }
  message Error {
    string catchall = 1;
  }
}

message ResolveRequest {
  uint32 market_id = 1;
  Resolution resolution = 2;
  string notes = 3;
}
message ResolveResponse {
  oneof resolve_result {
    Void ok = 1;
    Error error = 2;
  }
  message Error {
    string catchall = 1;
  }
}

message SetTrustedRequest {
  UserId who = 1;
  bool trusted = 2;
}
message SetTrustedResponse {
  oneof set_trusted_result {
    Void ok = 1;
    Error error = 2;
  }
  message Error {
    string catchall = 1;
  }
}

message GetUserRequest {
  UserId who = 1;
}
message GetUserResponse {
  oneof get_user_result {
    UserUserView ok = 1;
    Error error = 2;
  }
  message Error {
    string catchall = 1;
  }
}

message ChangePasswordRequest {
  string old_password = 1;
  string new_password = 2;
}
message ChangePasswordResponse {
  oneof change_password_result {
    Void ok = 1;
    Error error = 2;
  }
  message Error {
    string catchall = 1;
  }
}
