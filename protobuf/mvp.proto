syntax = "proto3";

package biatob.proto.mvp;

message AuthToken {
  bytes hmac_of_rest = 1;
  string owner = 7;
  double minted_unixtime = 5;
  double expires_unixtime = 6;

}

message DatabaseInfo {
  oneof database_kind {
    string sqlite = 1;
    MysqlDbCredentials mysql = 2;
  }
  message MysqlDbCredentials {
    string hostname = 1;
    string username = 2;
    string password = 3;
    string dbname = 4;
  }
}

message CredentialsConfig {
  SmtpCredentials smtp = 1;
  bytes token_signing_secret = 2;
  DatabaseInfo database_info = 3;
  message SmtpCredentials {
    string hostname = 1;
    uint32 port = 2;
    string username = 3;
    string password = 4;
    string from_addr = 5;
  }
}

message EmailFlowState {
  oneof email_flow_state_kind {
    Void unstarted = 1;
    CodeSent code_sent = 2;
    string verified = 3;
  }
  message CodeSent {
    string email = 1;
    HashedPassword code = 2;
  }
}

message HashedPassword {
  bytes salt = 1;
  bytes scrypt = 2;
}

message GenericUserInfo {
  string email_address = 10;
  map<string, Invitation> invitations = 5;
  map<string, Relationship> relationships = 6;

  oneof login_type {
    HashedPassword login_password = 7;
  }

  message Invitation {}
}
message Relationship {
  bool trusts_you = 1;
  bool trusted_by_you = 2;
}

message UsernameInfo {
  GenericUserInfo info = 1;
  HashedPassword password = 2;
}

message EmailAttempt {
  double unixtime = 1;
  bool succeeded = 2;
}

message ResolutionEvent {
  double unixtime = 4;
  Resolution resolution = 2;
  string notes = 3;
  ResolutionEvent prior_revision = 5;
}

enum TradeState {
  TRADE_STATE_ACTIVE = 0;
  TRADE_STATE_QUEUED = 1;
  TRADE_STATE_DISAVOWED = 2;
  TRADE_STATE_DEQUEUE_FAILED = 3;
}
message Trade {
  string bettor = 7;
  bool bettor_is_a_skeptic = 2;
  uint32 bettor_stake_cents = 3;
  uint32 creator_stake_cents = 4;
  double transacted_unixtime = 6;
  double updated_unixtime = 8;
  string notes = 9;
  TradeState state = 10;
}

enum Void {
  VOID = 0;
}

enum Resolution {
  RESOLUTION_NONE_YET = 0;
  RESOLUTION_YES = 1;
  RESOLUTION_NO = 2;
  RESOLUTION_INVALID = 3;
}

message WhoamiRequest {}
message WhoamiResponse {
  string username = 1;
}

message SignOutRequest {}
message SignOutResponse {}

message AuthSuccess {
  AuthToken token = 1;
  GenericUserInfo user_info = 2;
}

message SendVerificationEmailRequest {
  string email_address = 1;
}
message SendVerificationEmailResponse {
  oneof send_verification_email_result {
    Void ok = 1;
    Error error = 2;
  }
  message Error {
    string catchall = 1;
  }
}

message ProofOfEmail {
  Payload payload = 1;
  bytes salt = 2;
  bytes hmac = 3;
  message Payload {
    string email_address = 1;
  }
}

message RegisterUsernameRequest {
  string username = 1;
  string password = 2;
  ProofOfEmail proof_of_email = 3;
}
message RegisterUsernameResponse {
  oneof register_username_result {
    AuthSuccess ok = 1;
    Error error = 2;
  }
  message Error {
    string catchall = 1;
    Void username_taken = 2;
  }
}

message LogInUsernameRequest {
  string username = 1;
  string password = 2;
}
message LogInUsernameResponse {
  oneof log_in_username_result {
    AuthSuccess ok = 1;
    Error error = 2;
  }
  message Error {
    string catchall = 1;
  }
}

message CertaintyRange {
  float low = 1;
  float high = 2;
}
enum PredictionViewPrivacy {
  PREDICTION_VIEW_PRIVACY_ANYBODY = 0;
  PREDICTION_VIEW_PRIVACY_ANYBODY_WITH_THE_LINK = 1;
}
message CreatePredictionRequest {
  string prediction = 2;
  PredictionViewPrivacy view_privacy = 3;
  CertaintyRange certainty = 4;
  uint32 maximum_stake_cents = 5;
  uint32 open_seconds = 6;
  string special_rules = 7;
  double resolves_at_unixtime = 9;
}
message CreatePredictionResponse {
  oneof create_prediction_result {
    string new_prediction_id = 1;
    Error error = 2;
  }
  message Error {
    string catchall = 1;
  }
}

message GetPredictionRequest {
  string prediction_id = 2;
}
message GetPredictionResponse {
  oneof get_prediction_result {
    UserPredictionView prediction = 1;
    Error error = 2;
  }
  message Error {
    string catchall = 1;
    Void no_such_prediction = 2;
  }
}

enum PredictionFollowingStatus {
  PREDICTION_FOLLOWING_NOT_FOLLOWING = 0;
  PREDICTION_FOLLOWING_FOLLOWING = 1;
  PREDICTION_FOLLOWING_MANDATORY_BECAUSE_STAKED = 2;
}
message UserPredictionView {
  string prediction = 1;
  CertaintyRange certainty = 2;
  uint32 maximum_stake_cents = 3;
  uint32 remaining_stake_cents_vs_believers = 4;
  uint32 remaining_stake_cents_vs_skeptics = 5;
  double created_unixtime = 13;
  double closes_unixtime = 14;
  string special_rules = 8;
  string creator = 9;
  ResolutionEvent resolution = 17;
  repeated Trade your_trades = 11;
  double resolves_at_unixtime = 15;
  PredictionFollowingStatus your_following_status = 18;
}

message ListMyStakesRequest {
}
message ListMyStakesResponse {
  oneof list_my_stakes_result {
    PredictionsById ok = 1;
    Error error = 2;
  }
  message Error {
    string catchall = 1;
  }
}
message PredictionsById {
  map<string, UserPredictionView> predictions = 1;
}

message ListPredictionsRequest {
  string creator = 2;
}
message ListPredictionsResponse {
  oneof list_predictions_result {
    PredictionsById ok = 1;
    Error error = 2;
  }
  message Error {
    string catchall = 1;
  }
}

message FollowRequest {
  string prediction_id = 1;
  bool follow = 2;
}
message FollowResponse {
  oneof follow_result {
    UserPredictionView ok = 1;
    Error error = 2;
  }
  message Error {
    string catchall = 1;
  }
}

message StakeRequest {
  string prediction_id = 2;
  bool bettor_is_a_skeptic = 3;
  uint32 bettor_stake_cents = 4;
}
message StakeResponse {
  oneof stake_result {
    UserPredictionView ok = 1;
    Error error = 2;
  }
  message Error {
    string catchall = 1;
  }
}

message ResolveRequest {
  string prediction_id = 1;
  Resolution resolution = 2;
  string notes = 3;
}
message ResolveResponse {
  oneof resolve_result {
    UserPredictionView ok = 1;
    Error error = 2;
  }
  message Error {
    string catchall = 1;
  }
}

message SetTrustedRequest {
  string who = 3;
  bool trusted = 2;
}
message SetTrustedResponse {
  oneof set_trusted_result {
    GenericUserInfo ok = 1;
    Error error = 2;
  }
  message Error {
    string catchall = 1;
  }
}

message GetUserRequest {
  string who = 2;
}
message GetUserResponse {
  oneof get_user_result {
    Relationship ok = 1;
    Error error = 2;
  }
  message Error {
    string catchall = 1;
  }
}

message ChangePasswordRequest {
  string old_password = 1;
  string new_password = 2;
}
message ChangePasswordResponse {
  oneof change_password_result {
    Void ok = 1;
    Error error = 2;
  }
  message Error {
    string catchall = 1;
  }
}

message GetSettingsRequest {
  repeated string include_relationships_with_users = 1;
}
message GetSettingsResponse {
  oneof get_settings_result {
    GenericUserInfo ok = 1;
    Error error = 2;
  }
  message Error {
    string catchall = 1;
  }
}

message SendInvitationRequest {
  string recipient = 1;
}
message SendInvitationResponse {
  oneof send_invitation_result {
    GenericUserInfo ok = 1;
    Error error = 2;
  }
  message Error {
    string catchall = 1;
  }
}

message CheckInvitationRequest {
  string nonce = 1;
}
message CheckInvitationResponse {
  oneof check_invitation_result {
    Result ok = 1;
    Error error = 2;
  }
  message Result {
    string inviter = 1;
    string recipient = 2;
  }
  message Error {
    string catchall = 1;
  }
}

message AcceptInvitationRequest {
  string nonce = 1;
}
message AcceptInvitationResponse {
  oneof accept_invitation_result {
    GenericUserInfo ok = 1;
    Error error = 2;
  }
  message Error {
    string catchall = 1;
  }
}


message SavedCreatedPredictionFormState {
  string prediction_field = 1;
  string resolves_at_field = 2;
  string stake_field = 3;
  string low_p_field = 4;
  string high_p_field = 5;
  string open_for_unit_field = 6;
  string open_for_seconds_field = 7;
  string view_privacy_field = 9;
  string special_rules_field = 8;
}