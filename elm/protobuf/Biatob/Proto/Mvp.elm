{- !!! DO NOT EDIT THIS FILE MANUALLY !!! -}


module Biatob.Proto.Mvp exposing
    ( Void(..), Resolution(..), Kind(..), UserId, AuthToken, CredentialsConfig, CredentialsConfigSmtpCredentials, InvitationId, Invitation, EmailFlowStateKind(..), EmailFlowState, EmailFlowStateCodeSent, HashedPassword, GenericUserInfo, UsernameInfo, WorldState, WorldStatePrediction, ResolutionEvent, Trade, WhoamiRequest, WhoamiResponse, SignOutRequest, SignOutResponse, RegisterUsernameRequest, RegisterUsernameResult(..), RegisterUsernameResponse, RegisterUsernameResponseError, LogInUsernameRequest, LogInUsernameResult(..), LogInUsernameResponse, LogInUsernameResponseError, CertaintyRange, CreatePredictionRequest, CreatePredictionResult(..), CreatePredictionResponse, CreatePredictionResponseError, GetPredictionRequest, GetPredictionResult(..), GetPredictionResponse, GetPredictionResponseError, UserPredictionView, UserUserView, ListMyStakesRequest, ListMyStakesResult(..), ListMyStakesResponse, ListMyStakesResponseError, PredictionsById, StakeRequest, StakeResult(..), StakeResponse, StakeResponseError, ResolveRequest, ResolveResult(..), ResolveResponse, ResolveResponseError, SetTrustedRequest, SetTrustedResult(..), SetTrustedResponse, SetTrustedResponseError, GetUserRequest, GetUserResult(..), GetUserResponse, GetUserResponseError, ChangePasswordRequest, ChangePasswordResult(..), ChangePasswordResponse, ChangePasswordResponseError, SetEmailRequest, SetEmailResult(..), SetEmailResponse, SetEmailResponseError, VerifyEmailRequest, VerifyEmailResult(..), VerifyEmailResponse, VerifyEmailResponseError, GetSettingsRequest, GetSettingsResult(..), GetSettingsResponse, GetSettingsResponseError, MaybeBool, UpdateSettingsRequest, UpdateSettingsResult(..), UpdateSettingsResponse, UpdateSettingsResponseError, CreateInvitationRequest, CreateInvitationResult(..), CreateInvitationResponse, CreateInvitationResponseResult, CreateInvitationResponseError, AcceptInvitationRequest, AcceptInvitationResult(..), AcceptInvitationResponse, AcceptInvitationResponseError
    , userIdDecoder, authTokenDecoder, credentialsConfigDecoder, invitationIdDecoder, invitationDecoder, emailFlowStateDecoder, hashedPasswordDecoder, genericUserInfoDecoder, usernameInfoDecoder, worldStateDecoder, resolutionEventDecoder, tradeDecoder, whoamiRequestDecoder, whoamiResponseDecoder, signOutRequestDecoder, signOutResponseDecoder, registerUsernameRequestDecoder, registerUsernameResponseDecoder, logInUsernameRequestDecoder, logInUsernameResponseDecoder, certaintyRangeDecoder, createPredictionRequestDecoder, createPredictionResponseDecoder, getPredictionRequestDecoder, getPredictionResponseDecoder, userPredictionViewDecoder, userUserViewDecoder, listMyStakesRequestDecoder, listMyStakesResponseDecoder, predictionsByIdDecoder, stakeRequestDecoder, stakeResponseDecoder, resolveRequestDecoder, resolveResponseDecoder, setTrustedRequestDecoder, setTrustedResponseDecoder, getUserRequestDecoder, getUserResponseDecoder, changePasswordRequestDecoder, changePasswordResponseDecoder, setEmailRequestDecoder, setEmailResponseDecoder, verifyEmailRequestDecoder, verifyEmailResponseDecoder, getSettingsRequestDecoder, getSettingsResponseDecoder, maybeBoolDecoder, updateSettingsRequestDecoder, updateSettingsResponseDecoder, createInvitationRequestDecoder, createInvitationResponseDecoder, acceptInvitationRequestDecoder, acceptInvitationResponseDecoder
    , toUserIdEncoder, toAuthTokenEncoder, toCredentialsConfigEncoder, toInvitationIdEncoder, toInvitationEncoder, toEmailFlowStateEncoder, toHashedPasswordEncoder, toGenericUserInfoEncoder, toUsernameInfoEncoder, toWorldStateEncoder, toResolutionEventEncoder, toTradeEncoder, toWhoamiRequestEncoder, toWhoamiResponseEncoder, toSignOutRequestEncoder, toSignOutResponseEncoder, toRegisterUsernameRequestEncoder, toRegisterUsernameResponseEncoder, toLogInUsernameRequestEncoder, toLogInUsernameResponseEncoder, toCertaintyRangeEncoder, toCreatePredictionRequestEncoder, toCreatePredictionResponseEncoder, toGetPredictionRequestEncoder, toGetPredictionResponseEncoder, toUserPredictionViewEncoder, toUserUserViewEncoder, toListMyStakesRequestEncoder, toListMyStakesResponseEncoder, toPredictionsByIdEncoder, toStakeRequestEncoder, toStakeResponseEncoder, toResolveRequestEncoder, toResolveResponseEncoder, toSetTrustedRequestEncoder, toSetTrustedResponseEncoder, toGetUserRequestEncoder, toGetUserResponseEncoder, toChangePasswordRequestEncoder, toChangePasswordResponseEncoder, toSetEmailRequestEncoder, toSetEmailResponseEncoder, toVerifyEmailRequestEncoder, toVerifyEmailResponseEncoder, toGetSettingsRequestEncoder, toGetSettingsResponseEncoder, toMaybeBoolEncoder, toUpdateSettingsRequestEncoder, toUpdateSettingsResponseEncoder, toCreateInvitationRequestEncoder, toCreateInvitationResponseEncoder, toAcceptInvitationRequestEncoder, toAcceptInvitationResponseEncoder
    )

{-| ProtoBuf module: `Biatob.Proto.Mvp`

This module was generated automatically using

  - [`protoc-gen-elm`](https://www.npmjs.com/package/protoc-gen-elm) 1.0.0-beta-2
  - `protoc` unknown version
  - the following specification file: `protobuf/mvp.proto`

To run it use [`elm-protocol-buffers`](https://package.elm-lang.org/packages/eriktim/elm-protocol-buffers/1.1.0) version 1.1.0 or higher.


# Model

@docs Void, Resolution, Kind, UserId, AuthToken, CredentialsConfig, CredentialsConfigSmtpCredentials, InvitationId, Invitation, EmailFlowStateKind, EmailFlowState, EmailFlowStateCodeSent, HashedPassword, GenericUserInfo, UsernameInfo, WorldState, WorldStatePrediction, ResolutionEvent, Trade, WhoamiRequest, WhoamiResponse, SignOutRequest, SignOutResponse, RegisterUsernameRequest, RegisterUsernameResult, RegisterUsernameResponse, RegisterUsernameResponseError, LogInUsernameRequest, LogInUsernameResult, LogInUsernameResponse, LogInUsernameResponseError, CertaintyRange, CreatePredictionRequest, CreatePredictionResult, CreatePredictionResponse, CreatePredictionResponseError, GetPredictionRequest, GetPredictionResult, GetPredictionResponse, GetPredictionResponseError, UserPredictionView, UserUserView, ListMyStakesRequest, ListMyStakesResult, ListMyStakesResponse, ListMyStakesResponseError, PredictionsById, StakeRequest, StakeResult, StakeResponse, StakeResponseError, ResolveRequest, ResolveResult, ResolveResponse, ResolveResponseError, SetTrustedRequest, SetTrustedResult, SetTrustedResponse, SetTrustedResponseError, GetUserRequest, GetUserResult, GetUserResponse, GetUserResponseError, ChangePasswordRequest, ChangePasswordResult, ChangePasswordResponse, ChangePasswordResponseError, SetEmailRequest, SetEmailResult, SetEmailResponse, SetEmailResponseError, VerifyEmailRequest, VerifyEmailResult, VerifyEmailResponse, VerifyEmailResponseError, GetSettingsRequest, GetSettingsResult, GetSettingsResponse, GetSettingsResponseError, MaybeBool, UpdateSettingsRequest, UpdateSettingsResult, UpdateSettingsResponse, UpdateSettingsResponseError, CreateInvitationRequest, CreateInvitationResult, CreateInvitationResponse, CreateInvitationResponseResult, CreateInvitationResponseError, AcceptInvitationRequest, AcceptInvitationResult, AcceptInvitationResponse, AcceptInvitationResponseError


# Decoder

@docs userIdDecoder, authTokenDecoder, credentialsConfigDecoder, invitationIdDecoder, invitationDecoder, emailFlowStateDecoder, hashedPasswordDecoder, genericUserInfoDecoder, usernameInfoDecoder, worldStateDecoder, resolutionEventDecoder, tradeDecoder, whoamiRequestDecoder, whoamiResponseDecoder, signOutRequestDecoder, signOutResponseDecoder, registerUsernameRequestDecoder, registerUsernameResponseDecoder, logInUsernameRequestDecoder, logInUsernameResponseDecoder, certaintyRangeDecoder, createPredictionRequestDecoder, createPredictionResponseDecoder, getPredictionRequestDecoder, getPredictionResponseDecoder, userPredictionViewDecoder, userUserViewDecoder, listMyStakesRequestDecoder, listMyStakesResponseDecoder, predictionsByIdDecoder, stakeRequestDecoder, stakeResponseDecoder, resolveRequestDecoder, resolveResponseDecoder, setTrustedRequestDecoder, setTrustedResponseDecoder, getUserRequestDecoder, getUserResponseDecoder, changePasswordRequestDecoder, changePasswordResponseDecoder, setEmailRequestDecoder, setEmailResponseDecoder, verifyEmailRequestDecoder, verifyEmailResponseDecoder, getSettingsRequestDecoder, getSettingsResponseDecoder, maybeBoolDecoder, updateSettingsRequestDecoder, updateSettingsResponseDecoder, createInvitationRequestDecoder, createInvitationResponseDecoder, acceptInvitationRequestDecoder, acceptInvitationResponseDecoder


# Encoder

@docs toUserIdEncoder, toAuthTokenEncoder, toCredentialsConfigEncoder, toInvitationIdEncoder, toInvitationEncoder, toEmailFlowStateEncoder, toHashedPasswordEncoder, toGenericUserInfoEncoder, toUsernameInfoEncoder, toWorldStateEncoder, toResolutionEventEncoder, toTradeEncoder, toWhoamiRequestEncoder, toWhoamiResponseEncoder, toSignOutRequestEncoder, toSignOutResponseEncoder, toRegisterUsernameRequestEncoder, toRegisterUsernameResponseEncoder, toLogInUsernameRequestEncoder, toLogInUsernameResponseEncoder, toCertaintyRangeEncoder, toCreatePredictionRequestEncoder, toCreatePredictionResponseEncoder, toGetPredictionRequestEncoder, toGetPredictionResponseEncoder, toUserPredictionViewEncoder, toUserUserViewEncoder, toListMyStakesRequestEncoder, toListMyStakesResponseEncoder, toPredictionsByIdEncoder, toStakeRequestEncoder, toStakeResponseEncoder, toResolveRequestEncoder, toResolveResponseEncoder, toSetTrustedRequestEncoder, toSetTrustedResponseEncoder, toGetUserRequestEncoder, toGetUserResponseEncoder, toChangePasswordRequestEncoder, toChangePasswordResponseEncoder, toSetEmailRequestEncoder, toSetEmailResponseEncoder, toVerifyEmailRequestEncoder, toVerifyEmailResponseEncoder, toGetSettingsRequestEncoder, toGetSettingsResponseEncoder, toMaybeBoolEncoder, toUpdateSettingsRequestEncoder, toUpdateSettingsResponseEncoder, toCreateInvitationRequestEncoder, toCreateInvitationResponseEncoder, toAcceptInvitationRequestEncoder, toAcceptInvitationResponseEncoder

-}

import Bytes
import Dict
import Protobuf.Decode as Decode
import Protobuf.Encode as Encode



-- MODEL


{-| `Void` enumeration
-}
type Void
    = Void
    | VoidUnrecognized_ Int


{-| `Resolution` enumeration
-}
type Resolution
    = ResolutionNoneYet
    | ResolutionYes
    | ResolutionNo
    | ResolutionInvalid
    | ResolutionUnrecognized_ Int


{-| Kind
-}
type Kind
    = KindUsername String


{-| `UserId` message
-}
type alias UserId =
    { kind : Maybe Kind
    }


{-| `AuthToken` message
-}
type alias AuthToken =
    { hmacOfRest : Bytes.Bytes
    , owner : Maybe UserId
    , mintedUnixtime : Int
    , expiresUnixtime : Int
    }


{-| `CredentialsConfig` message
-}
type alias CredentialsConfig =
    { smtp : Maybe CredentialsConfigSmtpCredentials
    , tokenSigningSecret : Bytes.Bytes
    }


{-| `CredentialsConfigSmtpCredentials` message
-}
type alias CredentialsConfigSmtpCredentials =
    { hostname : String
    , port_ : Int
    , username : String
    , password : String
    , fromAddr : String
    }


{-| `InvitationId` message
-}
type alias InvitationId =
    { inviter : Maybe UserId
    , nonce : String
    }


{-| `Invitation` message
-}
type alias Invitation =
    { createdUnixtime : Int
    , notes : String
    , acceptedBy : Maybe UserId
    , acceptedUnixtime : Int
    }


{-| EmailFlowStateKind
-}
type EmailFlowStateKind
    = EmailFlowStateKindUnstarted Void
    | EmailFlowStateKindCodeSent EmailFlowStateCodeSent
    | EmailFlowStateKindVerified String


{-| `EmailFlowState` message
-}
type alias EmailFlowState =
    { emailFlowStateKind : Maybe EmailFlowStateKind
    }


{-| `EmailFlowStateCodeSent` message
-}
type alias EmailFlowStateCodeSent =
    { email : String
    , code : Maybe HashedPassword
    }


{-| `HashedPassword` message
-}
type alias HashedPassword =
    { salt : Bytes.Bytes
    , scrypt : Bytes.Bytes
    }


{-| `GenericUserInfo` message
-}
type alias GenericUserInfo =
    { trustedUsers : List UserId
    , email : Maybe EmailFlowState
    , emailRemindersToResolve : Bool
    , emailResolutionNotifications : Bool
    , invitations : Dict.Dict String (Maybe Invitation)
    }


{-| `UsernameInfo` message
-}
type alias UsernameInfo =
    { info : Maybe GenericUserInfo
    , password : Maybe HashedPassword
    }


{-| `WorldState` message
-}
type alias WorldState =
    { usernameUsers : Dict.Dict String (Maybe UsernameInfo)
    , predictions : Dict.Dict Int (Maybe WorldStatePrediction)
    , emailRemindersSentUpToUnixtime : Int
    }


{-| `WorldStatePrediction` message
-}
type alias WorldStatePrediction =
    { prediction : String
    , certainty : Maybe CertaintyRange
    , maximumStakeCents : Int
    , createdUnixtime : Int
    , closesUnixtime : Int
    , resolvesAtUnixtime : Int
    , specialRules : String
    , creator : Maybe UserId
    , trades : List Trade
    , resolutions : List ResolutionEvent
    }


{-| `ResolutionEvent` message
-}
type alias ResolutionEvent =
    { unixtime : Int
    , resolution : Resolution
    , notes : String
    }


{-| `Trade` message
-}
type alias Trade =
    { bettor : Maybe UserId
    , bettorIsASkeptic : Bool
    , bettorStakeCents : Int
    , creatorStakeCents : Int
    , transactedUnixtime : Int
    }


{-| `WhoamiRequest` message
-}
type alias WhoamiRequest =
    {}


{-| `WhoamiResponse` message
-}
type alias WhoamiResponse =
    { auth : Maybe AuthToken
    }


{-| `SignOutRequest` message
-}
type alias SignOutRequest =
    {}


{-| `SignOutResponse` message
-}
type alias SignOutResponse =
    {}


{-| `RegisterUsernameRequest` message
-}
type alias RegisterUsernameRequest =
    { username : String
    , password : String
    }


{-| RegisterUsernameResult
-}
type RegisterUsernameResult
    = RegisterUsernameResultOk AuthToken
    | RegisterUsernameResultError RegisterUsernameResponseError


{-| `RegisterUsernameResponse` message
-}
type alias RegisterUsernameResponse =
    { registerUsernameResult : Maybe RegisterUsernameResult
    }


{-| `RegisterUsernameResponseError` message
-}
type alias RegisterUsernameResponseError =
    { catchall : String
    , usernameTaken : Void
    }


{-| `LogInUsernameRequest` message
-}
type alias LogInUsernameRequest =
    { username : String
    , password : String
    }


{-| LogInUsernameResult
-}
type LogInUsernameResult
    = LogInUsernameResultOk AuthToken
    | LogInUsernameResultError LogInUsernameResponseError


{-| `LogInUsernameResponse` message
-}
type alias LogInUsernameResponse =
    { logInUsernameResult : Maybe LogInUsernameResult
    }


{-| `LogInUsernameResponseError` message
-}
type alias LogInUsernameResponseError =
    { catchall : String
    }


{-| `CertaintyRange` message
-}
type alias CertaintyRange =
    { low : Float
    , high : Float
    }


{-| `CreatePredictionRequest` message
-}
type alias CreatePredictionRequest =
    { prediction : String
    , certainty : Maybe CertaintyRange
    , maximumStakeCents : Int
    , openSeconds : Int
    , specialRules : String
    , resolvesAtUnixtime : Int
    }


{-| CreatePredictionResult
-}
type CreatePredictionResult
    = CreatePredictionResultNewPredictionId Int
    | CreatePredictionResultError CreatePredictionResponseError


{-| `CreatePredictionResponse` message
-}
type alias CreatePredictionResponse =
    { createPredictionResult : Maybe CreatePredictionResult
    }


{-| `CreatePredictionResponseError` message
-}
type alias CreatePredictionResponseError =
    { catchall : String
    }


{-| `GetPredictionRequest` message
-}
type alias GetPredictionRequest =
    { predictionId : Int
    }


{-| GetPredictionResult
-}
type GetPredictionResult
    = GetPredictionResultPrediction UserPredictionView
    | GetPredictionResultError GetPredictionResponseError


{-| `GetPredictionResponse` message
-}
type alias GetPredictionResponse =
    { getPredictionResult : Maybe GetPredictionResult
    }


{-| `GetPredictionResponseError` message
-}
type alias GetPredictionResponseError =
    { catchall : String
    , noSuchPrediction : Void
    }


{-| `UserPredictionView` message
-}
type alias UserPredictionView =
    { prediction : String
    , certainty : Maybe CertaintyRange
    , maximumStakeCents : Int
    , remainingStakeCentsVsBelievers : Int
    , remainingStakeCentsVsSkeptics : Int
    , createdUnixtime : Int
    , closesUnixtime : Int
    , specialRules : String
    , creator : Maybe UserUserView
    , resolutions : List ResolutionEvent
    , yourTrades : List Trade
    , resolvesAtUnixtime : Int
    }


{-| `UserUserView` message
-}
type alias UserUserView =
    { displayName : String
    , isSelf : Bool
    , isTrusted : Bool
    , trustsYou : Bool
    }


{-| `ListMyStakesRequest` message
-}
type alias ListMyStakesRequest =
    {}


{-| ListMyStakesResult
-}
type ListMyStakesResult
    = ListMyStakesResultOk PredictionsById
    | ListMyStakesResultError ListMyStakesResponseError


{-| `ListMyStakesResponse` message
-}
type alias ListMyStakesResponse =
    { listMyStakesResult : Maybe ListMyStakesResult
    }


{-| `ListMyStakesResponseError` message
-}
type alias ListMyStakesResponseError =
    { catchall : String
    , noSuchPrediction : Void
    }


{-| `PredictionsById` message
-}
type alias PredictionsById =
    { predictions : Dict.Dict Int (Maybe UserPredictionView)
    }


{-| `StakeRequest` message
-}
type alias StakeRequest =
    { predictionId : Int
    , bettorIsASkeptic : Bool
    , bettorStakeCents : Int
    }


{-| StakeResult
-}
type StakeResult
    = StakeResultOk Void
    | StakeResultError StakeResponseError


{-| `StakeResponse` message
-}
type alias StakeResponse =
    { stakeResult : Maybe StakeResult
    }


{-| `StakeResponseError` message
-}
type alias StakeResponseError =
    { catchall : String
    }


{-| `ResolveRequest` message
-}
type alias ResolveRequest =
    { predictionId : Int
    , resolution : Resolution
    , notes : String
    }


{-| ResolveResult
-}
type ResolveResult
    = ResolveResultOk Void
    | ResolveResultError ResolveResponseError


{-| `ResolveResponse` message
-}
type alias ResolveResponse =
    { resolveResult : Maybe ResolveResult
    }


{-| `ResolveResponseError` message
-}
type alias ResolveResponseError =
    { catchall : String
    }


{-| `SetTrustedRequest` message
-}
type alias SetTrustedRequest =
    { who : Maybe UserId
    , trusted : Bool
    }


{-| SetTrustedResult
-}
type SetTrustedResult
    = SetTrustedResultOk Void
    | SetTrustedResultError SetTrustedResponseError


{-| `SetTrustedResponse` message
-}
type alias SetTrustedResponse =
    { setTrustedResult : Maybe SetTrustedResult
    }


{-| `SetTrustedResponseError` message
-}
type alias SetTrustedResponseError =
    { catchall : String
    }


{-| `GetUserRequest` message
-}
type alias GetUserRequest =
    { who : Maybe UserId
    }


{-| GetUserResult
-}
type GetUserResult
    = GetUserResultOk UserUserView
    | GetUserResultError GetUserResponseError


{-| `GetUserResponse` message
-}
type alias GetUserResponse =
    { getUserResult : Maybe GetUserResult
    }


{-| `GetUserResponseError` message
-}
type alias GetUserResponseError =
    { catchall : String
    }


{-| `ChangePasswordRequest` message
-}
type alias ChangePasswordRequest =
    { oldPassword : String
    , newPassword : String
    }


{-| ChangePasswordResult
-}
type ChangePasswordResult
    = ChangePasswordResultOk Void
    | ChangePasswordResultError ChangePasswordResponseError


{-| `ChangePasswordResponse` message
-}
type alias ChangePasswordResponse =
    { changePasswordResult : Maybe ChangePasswordResult
    }


{-| `ChangePasswordResponseError` message
-}
type alias ChangePasswordResponseError =
    { catchall : String
    }


{-| `SetEmailRequest` message
-}
type alias SetEmailRequest =
    { email : String
    }


{-| SetEmailResult
-}
type SetEmailResult
    = SetEmailResultOk Void
    | SetEmailResultError SetEmailResponseError


{-| `SetEmailResponse` message
-}
type alias SetEmailResponse =
    { setEmailResult : Maybe SetEmailResult
    }


{-| `SetEmailResponseError` message
-}
type alias SetEmailResponseError =
    { catchall : String
    }


{-| `VerifyEmailRequest` message
-}
type alias VerifyEmailRequest =
    { code : String
    }


{-| VerifyEmailResult
-}
type VerifyEmailResult
    = VerifyEmailResultVerifiedEmail String
    | VerifyEmailResultError VerifyEmailResponseError


{-| `VerifyEmailResponse` message
-}
type alias VerifyEmailResponse =
    { verifyEmailResult : Maybe VerifyEmailResult
    }


{-| `VerifyEmailResponseError` message
-}
type alias VerifyEmailResponseError =
    { catchall : String
    }


{-| `GetSettingsRequest` message
-}
type alias GetSettingsRequest =
    {}


{-| GetSettingsResult
-}
type GetSettingsResult
    = GetSettingsResultOkUsername UsernameInfo
    | GetSettingsResultError GetSettingsResponseError


{-| `GetSettingsResponse` message
-}
type alias GetSettingsResponse =
    { getSettingsResult : Maybe GetSettingsResult
    }


{-| `GetSettingsResponseError` message
-}
type alias GetSettingsResponseError =
    { catchall : String
    }


{-| `MaybeBool` message
-}
type alias MaybeBool =
    { value : Bool
    }


{-| `UpdateSettingsRequest` message
-}
type alias UpdateSettingsRequest =
    { emailRemindersToResolve : Maybe MaybeBool
    , emailResolutionNotifications : Maybe MaybeBool
    }


{-| UpdateSettingsResult
-}
type UpdateSettingsResult
    = UpdateSettingsResultOk GenericUserInfo
    | UpdateSettingsResultError UpdateSettingsResponseError


{-| `UpdateSettingsResponse` message
-}
type alias UpdateSettingsResponse =
    { updateSettingsResult : Maybe UpdateSettingsResult
    }


{-| `UpdateSettingsResponseError` message
-}
type alias UpdateSettingsResponseError =
    { catchall : String
    }


{-| `CreateInvitationRequest` message
-}
type alias CreateInvitationRequest =
    { notes : String
    }


{-| CreateInvitationResult
-}
type CreateInvitationResult
    = CreateInvitationResultOk CreateInvitationResponseResult
    | CreateInvitationResultError CreateInvitationResponseError


{-| `CreateInvitationResponse` message
-}
type alias CreateInvitationResponse =
    { createInvitationResult : Maybe CreateInvitationResult
    }


{-| `CreateInvitationResponseResult` message
-}
type alias CreateInvitationResponseResult =
    { nonce : String
    , invitation : Maybe Invitation
    }


{-| `CreateInvitationResponseError` message
-}
type alias CreateInvitationResponseError =
    { catchall : String
    }


{-| `AcceptInvitationRequest` message
-}
type alias AcceptInvitationRequest =
    { invitationId : Maybe InvitationId
    }


{-| AcceptInvitationResult
-}
type AcceptInvitationResult
    = AcceptInvitationResultOk Void
    | AcceptInvitationResultError AcceptInvitationResponseError


{-| `AcceptInvitationResponse` message
-}
type alias AcceptInvitationResponse =
    { acceptInvitationResult : Maybe AcceptInvitationResult
    }


{-| `AcceptInvitationResponseError` message
-}
type alias AcceptInvitationResponseError =
    { catchall : String
    }



-- DECODER


voidDecoder : Decode.Decoder Void
voidDecoder =
    Decode.int32
        |> Decode.map
            (\value ->
                case value of
                    0 ->
                        Void

                    v ->
                        VoidUnrecognized_ v
            )


resolutionDecoder : Decode.Decoder Resolution
resolutionDecoder =
    Decode.int32
        |> Decode.map
            (\value ->
                case value of
                    0 ->
                        ResolutionNoneYet

                    1 ->
                        ResolutionYes

                    2 ->
                        ResolutionNo

                    3 ->
                        ResolutionInvalid

                    v ->
                        ResolutionUnrecognized_ v
            )


{-| `UserId` decoder
-}
userIdDecoder : Decode.Decoder UserId
userIdDecoder =
    Decode.message (UserId Nothing)
        [ Decode.oneOf
            [ ( 1, Decode.map KindUsername Decode.string )
            ]
            setKind
        ]


{-| `AuthToken` decoder
-}
authTokenDecoder : Decode.Decoder AuthToken
authTokenDecoder =
    Decode.message (AuthToken (Encode.encode <| Encode.string "") Nothing 0 0)
        [ Decode.optional 1 Decode.bytes setHmacOfRest
        , Decode.optional 2 (Decode.map Just userIdDecoder) setOwner
        , Decode.optional 3 Decode.uint32 setMintedUnixtime
        , Decode.optional 4 Decode.uint32 setExpiresUnixtime
        ]


{-| `CredentialsConfig` decoder
-}
credentialsConfigDecoder : Decode.Decoder CredentialsConfig
credentialsConfigDecoder =
    Decode.message (CredentialsConfig Nothing (Encode.encode <| Encode.string ""))
        [ Decode.optional 1 (Decode.map Just credentialsConfigSmtpCredentialsDecoder) setSmtp
        , Decode.optional 2 Decode.bytes setTokenSigningSecret
        ]


credentialsConfigSmtpCredentialsDecoder : Decode.Decoder CredentialsConfigSmtpCredentials
credentialsConfigSmtpCredentialsDecoder =
    Decode.message (CredentialsConfigSmtpCredentials "" 0 "" "" "")
        [ Decode.optional 1 Decode.string setHostname
        , Decode.optional 2 Decode.uint32 setPort_
        , Decode.optional 3 Decode.string setUsername
        , Decode.optional 4 Decode.string setPassword
        , Decode.optional 5 Decode.string setFromAddr
        ]


{-| `InvitationId` decoder
-}
invitationIdDecoder : Decode.Decoder InvitationId
invitationIdDecoder =
    Decode.message (InvitationId Nothing "")
        [ Decode.optional 1 (Decode.map Just userIdDecoder) setInviter
        , Decode.optional 2 Decode.string setNonce
        ]


{-| `Invitation` decoder
-}
invitationDecoder : Decode.Decoder Invitation
invitationDecoder =
    Decode.message (Invitation 0 "" Nothing 0)
        [ Decode.optional 2 Decode.uint32 setCreatedUnixtime
        , Decode.optional 3 Decode.string setNotes
        , Decode.optional 4 (Decode.map Just userIdDecoder) setAcceptedBy
        , Decode.optional 5 Decode.uint32 setAcceptedUnixtime
        ]


{-| `EmailFlowState` decoder
-}
emailFlowStateDecoder : Decode.Decoder EmailFlowState
emailFlowStateDecoder =
    Decode.message (EmailFlowState Nothing)
        [ Decode.oneOf
            [ ( 1, Decode.map EmailFlowStateKindUnstarted voidDecoder )
            , ( 2, Decode.map EmailFlowStateKindCodeSent emailFlowStateCodeSentDecoder )
            , ( 3, Decode.map EmailFlowStateKindVerified Decode.string )
            ]
            setEmailFlowStateKind
        ]


emailFlowStateCodeSentDecoder : Decode.Decoder EmailFlowStateCodeSent
emailFlowStateCodeSentDecoder =
    Decode.message (EmailFlowStateCodeSent "" Nothing)
        [ Decode.optional 1 Decode.string setEmail
        , Decode.optional 2 (Decode.map Just hashedPasswordDecoder) setCode
        ]


{-| `HashedPassword` decoder
-}
hashedPasswordDecoder : Decode.Decoder HashedPassword
hashedPasswordDecoder =
    Decode.message (HashedPassword (Encode.encode <| Encode.string "") (Encode.encode <| Encode.string ""))
        [ Decode.optional 1 Decode.bytes setSalt
        , Decode.optional 2 Decode.bytes setScrypt
        ]


{-| `GenericUserInfo` decoder
-}
genericUserInfoDecoder : Decode.Decoder GenericUserInfo
genericUserInfoDecoder =
    Decode.message (GenericUserInfo [] Nothing False False Dict.empty)
        [ Decode.repeated 1 userIdDecoder .trustedUsers setTrustedUsers
        , Decode.optional 2 (Decode.map Just emailFlowStateDecoder) setEmail
        , Decode.optional 3 Decode.bool setEmailRemindersToResolve
        , Decode.optional 4 Decode.bool setEmailResolutionNotifications
        , Decode.mapped 5 ( "", Nothing ) Decode.string (Decode.map Just invitationDecoder) .invitations setInvitations
        ]


{-| `UsernameInfo` decoder
-}
usernameInfoDecoder : Decode.Decoder UsernameInfo
usernameInfoDecoder =
    Decode.message (UsernameInfo Nothing Nothing)
        [ Decode.optional 1 (Decode.map Just genericUserInfoDecoder) setInfo
        , Decode.optional 2 (Decode.map Just hashedPasswordDecoder) setPassword
        ]


{-| `WorldState` decoder
-}
worldStateDecoder : Decode.Decoder WorldState
worldStateDecoder =
    Decode.message (WorldState Dict.empty Dict.empty 0)
        [ Decode.mapped 1 ( "", Nothing ) Decode.string (Decode.map Just usernameInfoDecoder) .usernameUsers setUsernameUsers
        , Decode.mapped 2 ( 0, Nothing ) Decode.uint32 (Decode.map Just worldStatePredictionDecoder) .predictions setPredictions
        , Decode.optional 3 Decode.uint32 setEmailRemindersSentUpToUnixtime
        ]


worldStatePredictionDecoder : Decode.Decoder WorldStatePrediction
worldStatePredictionDecoder =
    Decode.message (WorldStatePrediction "" Nothing 0 0 0 0 "" Nothing [] [])
        [ Decode.optional 1 Decode.string setPrediction
        , Decode.optional 2 (Decode.map Just certaintyRangeDecoder) setCertainty
        , Decode.optional 3 Decode.uint32 setMaximumStakeCents
        , Decode.optional 4 Decode.uint32 setCreatedUnixtime
        , Decode.optional 5 Decode.uint32 setClosesUnixtime
        , Decode.optional 11 Decode.uint32 setResolvesAtUnixtime
        , Decode.optional 6 Decode.string setSpecialRules
        , Decode.optional 7 (Decode.map Just userIdDecoder) setCreator
        , Decode.repeated 8 tradeDecoder .trades setTrades
        , Decode.repeated 10 resolutionEventDecoder .resolutions setResolutions
        ]


{-| `ResolutionEvent` decoder
-}
resolutionEventDecoder : Decode.Decoder ResolutionEvent
resolutionEventDecoder =
    Decode.message (ResolutionEvent 0 ResolutionNoneYet "")
        [ Decode.optional 1 Decode.uint32 setUnixtime
        , Decode.optional 2 resolutionDecoder setResolution
        , Decode.optional 3 Decode.string setNotes
        ]


{-| `Trade` decoder
-}
tradeDecoder : Decode.Decoder Trade
tradeDecoder =
    Decode.message (Trade Nothing False 0 0 0)
        [ Decode.optional 1 (Decode.map Just userIdDecoder) setBettor
        , Decode.optional 2 Decode.bool setBettorIsASkeptic
        , Decode.optional 3 Decode.uint32 setBettorStakeCents
        , Decode.optional 4 Decode.uint32 setCreatorStakeCents
        , Decode.optional 5 Decode.uint32 setTransactedUnixtime
        ]


{-| `WhoamiRequest` decoder
-}
whoamiRequestDecoder : Decode.Decoder WhoamiRequest
whoamiRequestDecoder =
    Decode.message WhoamiRequest
        []


{-| `WhoamiResponse` decoder
-}
whoamiResponseDecoder : Decode.Decoder WhoamiResponse
whoamiResponseDecoder =
    Decode.message (WhoamiResponse Nothing)
        [ Decode.optional 1 (Decode.map Just authTokenDecoder) setAuth
        ]


{-| `SignOutRequest` decoder
-}
signOutRequestDecoder : Decode.Decoder SignOutRequest
signOutRequestDecoder =
    Decode.message SignOutRequest
        []


{-| `SignOutResponse` decoder
-}
signOutResponseDecoder : Decode.Decoder SignOutResponse
signOutResponseDecoder =
    Decode.message SignOutResponse
        []


{-| `RegisterUsernameRequest` decoder
-}
registerUsernameRequestDecoder : Decode.Decoder RegisterUsernameRequest
registerUsernameRequestDecoder =
    Decode.message (RegisterUsernameRequest "" "")
        [ Decode.optional 1 Decode.string setUsername
        , Decode.optional 2 Decode.string setPassword
        ]


{-| `RegisterUsernameResponse` decoder
-}
registerUsernameResponseDecoder : Decode.Decoder RegisterUsernameResponse
registerUsernameResponseDecoder =
    Decode.message (RegisterUsernameResponse Nothing)
        [ Decode.oneOf
            [ ( 1, Decode.map RegisterUsernameResultOk authTokenDecoder )
            , ( 2, Decode.map RegisterUsernameResultError registerUsernameResponseErrorDecoder )
            ]
            setRegisterUsernameResult
        ]


registerUsernameResponseErrorDecoder : Decode.Decoder RegisterUsernameResponseError
registerUsernameResponseErrorDecoder =
    Decode.message (RegisterUsernameResponseError "" Void)
        [ Decode.optional 1 Decode.string setCatchall
        , Decode.optional 2 voidDecoder setUsernameTaken
        ]


{-| `LogInUsernameRequest` decoder
-}
logInUsernameRequestDecoder : Decode.Decoder LogInUsernameRequest
logInUsernameRequestDecoder =
    Decode.message (LogInUsernameRequest "" "")
        [ Decode.optional 1 Decode.string setUsername
        , Decode.optional 2 Decode.string setPassword
        ]


{-| `LogInUsernameResponse` decoder
-}
logInUsernameResponseDecoder : Decode.Decoder LogInUsernameResponse
logInUsernameResponseDecoder =
    Decode.message (LogInUsernameResponse Nothing)
        [ Decode.oneOf
            [ ( 1, Decode.map LogInUsernameResultOk authTokenDecoder )
            , ( 2, Decode.map LogInUsernameResultError logInUsernameResponseErrorDecoder )
            ]
            setLogInUsernameResult
        ]


logInUsernameResponseErrorDecoder : Decode.Decoder LogInUsernameResponseError
logInUsernameResponseErrorDecoder =
    Decode.message (LogInUsernameResponseError "")
        [ Decode.optional 1 Decode.string setCatchall
        ]


{-| `CertaintyRange` decoder
-}
certaintyRangeDecoder : Decode.Decoder CertaintyRange
certaintyRangeDecoder =
    Decode.message (CertaintyRange 0 0)
        [ Decode.optional 1 Decode.float setLow
        , Decode.optional 2 Decode.float setHigh
        ]


{-| `CreatePredictionRequest` decoder
-}
createPredictionRequestDecoder : Decode.Decoder CreatePredictionRequest
createPredictionRequestDecoder =
    Decode.message (CreatePredictionRequest "" Nothing 0 0 "" 0)
        [ Decode.optional 2 Decode.string setPrediction
        , Decode.optional 4 (Decode.map Just certaintyRangeDecoder) setCertainty
        , Decode.optional 5 Decode.uint32 setMaximumStakeCents
        , Decode.optional 6 Decode.uint32 setOpenSeconds
        , Decode.optional 7 Decode.string setSpecialRules
        , Decode.optional 8 Decode.uint32 setResolvesAtUnixtime
        ]


{-| `CreatePredictionResponse` decoder
-}
createPredictionResponseDecoder : Decode.Decoder CreatePredictionResponse
createPredictionResponseDecoder =
    Decode.message (CreatePredictionResponse Nothing)
        [ Decode.oneOf
            [ ( 1, Decode.map CreatePredictionResultNewPredictionId Decode.uint32 )
            , ( 2, Decode.map CreatePredictionResultError createPredictionResponseErrorDecoder )
            ]
            setCreatePredictionResult
        ]


createPredictionResponseErrorDecoder : Decode.Decoder CreatePredictionResponseError
createPredictionResponseErrorDecoder =
    Decode.message (CreatePredictionResponseError "")
        [ Decode.optional 1 Decode.string setCatchall
        ]


{-| `GetPredictionRequest` decoder
-}
getPredictionRequestDecoder : Decode.Decoder GetPredictionRequest
getPredictionRequestDecoder =
    Decode.message (GetPredictionRequest 0)
        [ Decode.optional 2 Decode.uint32 setPredictionId
        ]


{-| `GetPredictionResponse` decoder
-}
getPredictionResponseDecoder : Decode.Decoder GetPredictionResponse
getPredictionResponseDecoder =
    Decode.message (GetPredictionResponse Nothing)
        [ Decode.oneOf
            [ ( 1, Decode.map GetPredictionResultPrediction userPredictionViewDecoder )
            , ( 2, Decode.map GetPredictionResultError getPredictionResponseErrorDecoder )
            ]
            setGetPredictionResult
        ]


getPredictionResponseErrorDecoder : Decode.Decoder GetPredictionResponseError
getPredictionResponseErrorDecoder =
    Decode.message (GetPredictionResponseError "" Void)
        [ Decode.optional 1 Decode.string setCatchall
        , Decode.optional 2 voidDecoder setNoSuchPrediction
        ]


{-| `UserPredictionView` decoder
-}
userPredictionViewDecoder : Decode.Decoder UserPredictionView
userPredictionViewDecoder =
    Decode.message (UserPredictionView "" Nothing 0 0 0 0 0 "" Nothing [] [] 0)
        [ Decode.optional 1 Decode.string setPrediction
        , Decode.optional 2 (Decode.map Just certaintyRangeDecoder) setCertainty
        , Decode.optional 3 Decode.uint32 setMaximumStakeCents
        , Decode.optional 4 Decode.uint32 setRemainingStakeCentsVsBelievers
        , Decode.optional 5 Decode.uint32 setRemainingStakeCentsVsSkeptics
        , Decode.optional 6 Decode.uint32 setCreatedUnixtime
        , Decode.optional 7 Decode.uint32 setClosesUnixtime
        , Decode.optional 8 Decode.string setSpecialRules
        , Decode.optional 9 (Decode.map Just userUserViewDecoder) setCreator
        , Decode.repeated 10 resolutionEventDecoder .resolutions setResolutions
        , Decode.repeated 11 tradeDecoder .yourTrades setYourTrades
        , Decode.optional 12 Decode.uint32 setResolvesAtUnixtime
        ]


{-| `UserUserView` decoder
-}
userUserViewDecoder : Decode.Decoder UserUserView
userUserViewDecoder =
    Decode.message (UserUserView "" False False False)
        [ Decode.optional 1 Decode.string setDisplayName
        , Decode.optional 2 Decode.bool setIsSelf
        , Decode.optional 3 Decode.bool setIsTrusted
        , Decode.optional 4 Decode.bool setTrustsYou
        ]


{-| `ListMyStakesRequest` decoder
-}
listMyStakesRequestDecoder : Decode.Decoder ListMyStakesRequest
listMyStakesRequestDecoder =
    Decode.message ListMyStakesRequest
        []


{-| `ListMyStakesResponse` decoder
-}
listMyStakesResponseDecoder : Decode.Decoder ListMyStakesResponse
listMyStakesResponseDecoder =
    Decode.message (ListMyStakesResponse Nothing)
        [ Decode.oneOf
            [ ( 1, Decode.map ListMyStakesResultOk predictionsByIdDecoder )
            , ( 2, Decode.map ListMyStakesResultError listMyStakesResponseErrorDecoder )
            ]
            setListMyStakesResult
        ]


listMyStakesResponseErrorDecoder : Decode.Decoder ListMyStakesResponseError
listMyStakesResponseErrorDecoder =
    Decode.message (ListMyStakesResponseError "" Void)
        [ Decode.optional 1 Decode.string setCatchall
        , Decode.optional 2 voidDecoder setNoSuchPrediction
        ]


{-| `PredictionsById` decoder
-}
predictionsByIdDecoder : Decode.Decoder PredictionsById
predictionsByIdDecoder =
    Decode.message (PredictionsById Dict.empty)
        [ Decode.mapped 1 ( 0, Nothing ) Decode.uint32 (Decode.map Just userPredictionViewDecoder) .predictions setPredictions
        ]


{-| `StakeRequest` decoder
-}
stakeRequestDecoder : Decode.Decoder StakeRequest
stakeRequestDecoder =
    Decode.message (StakeRequest 0 False 0)
        [ Decode.optional 2 Decode.uint32 setPredictionId
        , Decode.optional 3 Decode.bool setBettorIsASkeptic
        , Decode.optional 4 Decode.uint32 setBettorStakeCents
        ]


{-| `StakeResponse` decoder
-}
stakeResponseDecoder : Decode.Decoder StakeResponse
stakeResponseDecoder =
    Decode.message (StakeResponse Nothing)
        [ Decode.oneOf
            [ ( 1, Decode.map StakeResultOk voidDecoder )
            , ( 2, Decode.map StakeResultError stakeResponseErrorDecoder )
            ]
            setStakeResult
        ]


stakeResponseErrorDecoder : Decode.Decoder StakeResponseError
stakeResponseErrorDecoder =
    Decode.message (StakeResponseError "")
        [ Decode.optional 1 Decode.string setCatchall
        ]


{-| `ResolveRequest` decoder
-}
resolveRequestDecoder : Decode.Decoder ResolveRequest
resolveRequestDecoder =
    Decode.message (ResolveRequest 0 ResolutionNoneYet "")
        [ Decode.optional 1 Decode.uint32 setPredictionId
        , Decode.optional 2 resolutionDecoder setResolution
        , Decode.optional 3 Decode.string setNotes
        ]


{-| `ResolveResponse` decoder
-}
resolveResponseDecoder : Decode.Decoder ResolveResponse
resolveResponseDecoder =
    Decode.message (ResolveResponse Nothing)
        [ Decode.oneOf
            [ ( 1, Decode.map ResolveResultOk voidDecoder )
            , ( 2, Decode.map ResolveResultError resolveResponseErrorDecoder )
            ]
            setResolveResult
        ]


resolveResponseErrorDecoder : Decode.Decoder ResolveResponseError
resolveResponseErrorDecoder =
    Decode.message (ResolveResponseError "")
        [ Decode.optional 1 Decode.string setCatchall
        ]


{-| `SetTrustedRequest` decoder
-}
setTrustedRequestDecoder : Decode.Decoder SetTrustedRequest
setTrustedRequestDecoder =
    Decode.message (SetTrustedRequest Nothing False)
        [ Decode.optional 1 (Decode.map Just userIdDecoder) setWho
        , Decode.optional 2 Decode.bool setTrusted
        ]


{-| `SetTrustedResponse` decoder
-}
setTrustedResponseDecoder : Decode.Decoder SetTrustedResponse
setTrustedResponseDecoder =
    Decode.message (SetTrustedResponse Nothing)
        [ Decode.oneOf
            [ ( 1, Decode.map SetTrustedResultOk voidDecoder )
            , ( 2, Decode.map SetTrustedResultError setTrustedResponseErrorDecoder )
            ]
            setSetTrustedResult
        ]


setTrustedResponseErrorDecoder : Decode.Decoder SetTrustedResponseError
setTrustedResponseErrorDecoder =
    Decode.message (SetTrustedResponseError "")
        [ Decode.optional 1 Decode.string setCatchall
        ]


{-| `GetUserRequest` decoder
-}
getUserRequestDecoder : Decode.Decoder GetUserRequest
getUserRequestDecoder =
    Decode.message (GetUserRequest Nothing)
        [ Decode.optional 1 (Decode.map Just userIdDecoder) setWho
        ]


{-| `GetUserResponse` decoder
-}
getUserResponseDecoder : Decode.Decoder GetUserResponse
getUserResponseDecoder =
    Decode.message (GetUserResponse Nothing)
        [ Decode.oneOf
            [ ( 1, Decode.map GetUserResultOk userUserViewDecoder )
            , ( 2, Decode.map GetUserResultError getUserResponseErrorDecoder )
            ]
            setGetUserResult
        ]


getUserResponseErrorDecoder : Decode.Decoder GetUserResponseError
getUserResponseErrorDecoder =
    Decode.message (GetUserResponseError "")
        [ Decode.optional 1 Decode.string setCatchall
        ]


{-| `ChangePasswordRequest` decoder
-}
changePasswordRequestDecoder : Decode.Decoder ChangePasswordRequest
changePasswordRequestDecoder =
    Decode.message (ChangePasswordRequest "" "")
        [ Decode.optional 1 Decode.string setOldPassword
        , Decode.optional 2 Decode.string setNewPassword
        ]


{-| `ChangePasswordResponse` decoder
-}
changePasswordResponseDecoder : Decode.Decoder ChangePasswordResponse
changePasswordResponseDecoder =
    Decode.message (ChangePasswordResponse Nothing)
        [ Decode.oneOf
            [ ( 1, Decode.map ChangePasswordResultOk voidDecoder )
            , ( 2, Decode.map ChangePasswordResultError changePasswordResponseErrorDecoder )
            ]
            setChangePasswordResult
        ]


changePasswordResponseErrorDecoder : Decode.Decoder ChangePasswordResponseError
changePasswordResponseErrorDecoder =
    Decode.message (ChangePasswordResponseError "")
        [ Decode.optional 1 Decode.string setCatchall
        ]


{-| `SetEmailRequest` decoder
-}
setEmailRequestDecoder : Decode.Decoder SetEmailRequest
setEmailRequestDecoder =
    Decode.message (SetEmailRequest "")
        [ Decode.optional 1 Decode.string setEmail
        ]


{-| `SetEmailResponse` decoder
-}
setEmailResponseDecoder : Decode.Decoder SetEmailResponse
setEmailResponseDecoder =
    Decode.message (SetEmailResponse Nothing)
        [ Decode.oneOf
            [ ( 1, Decode.map SetEmailResultOk voidDecoder )
            , ( 2, Decode.map SetEmailResultError setEmailResponseErrorDecoder )
            ]
            setSetEmailResult
        ]


setEmailResponseErrorDecoder : Decode.Decoder SetEmailResponseError
setEmailResponseErrorDecoder =
    Decode.message (SetEmailResponseError "")
        [ Decode.optional 1 Decode.string setCatchall
        ]


{-| `VerifyEmailRequest` decoder
-}
verifyEmailRequestDecoder : Decode.Decoder VerifyEmailRequest
verifyEmailRequestDecoder =
    Decode.message (VerifyEmailRequest "")
        [ Decode.optional 1 Decode.string setCode
        ]


{-| `VerifyEmailResponse` decoder
-}
verifyEmailResponseDecoder : Decode.Decoder VerifyEmailResponse
verifyEmailResponseDecoder =
    Decode.message (VerifyEmailResponse Nothing)
        [ Decode.oneOf
            [ ( 1, Decode.map VerifyEmailResultVerifiedEmail Decode.string )
            , ( 2, Decode.map VerifyEmailResultError verifyEmailResponseErrorDecoder )
            ]
            setVerifyEmailResult
        ]


verifyEmailResponseErrorDecoder : Decode.Decoder VerifyEmailResponseError
verifyEmailResponseErrorDecoder =
    Decode.message (VerifyEmailResponseError "")
        [ Decode.optional 1 Decode.string setCatchall
        ]


{-| `GetSettingsRequest` decoder
-}
getSettingsRequestDecoder : Decode.Decoder GetSettingsRequest
getSettingsRequestDecoder =
    Decode.message GetSettingsRequest
        []


{-| `GetSettingsResponse` decoder
-}
getSettingsResponseDecoder : Decode.Decoder GetSettingsResponse
getSettingsResponseDecoder =
    Decode.message (GetSettingsResponse Nothing)
        [ Decode.oneOf
            [ ( 1, Decode.map GetSettingsResultOkUsername usernameInfoDecoder )
            , ( 2, Decode.map GetSettingsResultError getSettingsResponseErrorDecoder )
            ]
            setGetSettingsResult
        ]


getSettingsResponseErrorDecoder : Decode.Decoder GetSettingsResponseError
getSettingsResponseErrorDecoder =
    Decode.message (GetSettingsResponseError "")
        [ Decode.optional 1 Decode.string setCatchall
        ]


{-| `MaybeBool` decoder
-}
maybeBoolDecoder : Decode.Decoder MaybeBool
maybeBoolDecoder =
    Decode.message (MaybeBool False)
        [ Decode.optional 1 Decode.bool setValue
        ]


{-| `UpdateSettingsRequest` decoder
-}
updateSettingsRequestDecoder : Decode.Decoder UpdateSettingsRequest
updateSettingsRequestDecoder =
    Decode.message (UpdateSettingsRequest Nothing Nothing)
        [ Decode.optional 1 (Decode.map Just maybeBoolDecoder) setEmailRemindersToResolve
        , Decode.optional 2 (Decode.map Just maybeBoolDecoder) setEmailResolutionNotifications
        ]


{-| `UpdateSettingsResponse` decoder
-}
updateSettingsResponseDecoder : Decode.Decoder UpdateSettingsResponse
updateSettingsResponseDecoder =
    Decode.message (UpdateSettingsResponse Nothing)
        [ Decode.oneOf
            [ ( 1, Decode.map UpdateSettingsResultOk genericUserInfoDecoder )
            , ( 2, Decode.map UpdateSettingsResultError updateSettingsResponseErrorDecoder )
            ]
            setUpdateSettingsResult
        ]


updateSettingsResponseErrorDecoder : Decode.Decoder UpdateSettingsResponseError
updateSettingsResponseErrorDecoder =
    Decode.message (UpdateSettingsResponseError "")
        [ Decode.optional 1 Decode.string setCatchall
        ]


{-| `CreateInvitationRequest` decoder
-}
createInvitationRequestDecoder : Decode.Decoder CreateInvitationRequest
createInvitationRequestDecoder =
    Decode.message (CreateInvitationRequest "")
        [ Decode.optional 1 Decode.string setNotes
        ]


{-| `CreateInvitationResponse` decoder
-}
createInvitationResponseDecoder : Decode.Decoder CreateInvitationResponse
createInvitationResponseDecoder =
    Decode.message (CreateInvitationResponse Nothing)
        [ Decode.oneOf
            [ ( 1, Decode.map CreateInvitationResultOk createInvitationResponseResultDecoder )
            , ( 2, Decode.map CreateInvitationResultError createInvitationResponseErrorDecoder )
            ]
            setCreateInvitationResult
        ]


createInvitationResponseResultDecoder : Decode.Decoder CreateInvitationResponseResult
createInvitationResponseResultDecoder =
    Decode.message (CreateInvitationResponseResult "" Nothing)
        [ Decode.optional 1 Decode.string setNonce
        , Decode.optional 2 (Decode.map Just invitationDecoder) setInvitation
        ]


createInvitationResponseErrorDecoder : Decode.Decoder CreateInvitationResponseError
createInvitationResponseErrorDecoder =
    Decode.message (CreateInvitationResponseError "")
        [ Decode.optional 1 Decode.string setCatchall
        ]


{-| `AcceptInvitationRequest` decoder
-}
acceptInvitationRequestDecoder : Decode.Decoder AcceptInvitationRequest
acceptInvitationRequestDecoder =
    Decode.message (AcceptInvitationRequest Nothing)
        [ Decode.optional 1 (Decode.map Just invitationIdDecoder) setInvitationId
        ]


{-| `AcceptInvitationResponse` decoder
-}
acceptInvitationResponseDecoder : Decode.Decoder AcceptInvitationResponse
acceptInvitationResponseDecoder =
    Decode.message (AcceptInvitationResponse Nothing)
        [ Decode.oneOf
            [ ( 1, Decode.map AcceptInvitationResultOk voidDecoder )
            , ( 2, Decode.map AcceptInvitationResultError acceptInvitationResponseErrorDecoder )
            ]
            setAcceptInvitationResult
        ]


acceptInvitationResponseErrorDecoder : Decode.Decoder AcceptInvitationResponseError
acceptInvitationResponseErrorDecoder =
    Decode.message (AcceptInvitationResponseError "")
        [ Decode.optional 1 Decode.string setCatchall
        ]



-- ENCODER


toVoidEncoder : Void -> Encode.Encoder
toVoidEncoder value =
    Encode.int32 <|
        case value of
            Void ->
                0

            VoidUnrecognized_ v ->
                v


toResolutionEncoder : Resolution -> Encode.Encoder
toResolutionEncoder value =
    Encode.int32 <|
        case value of
            ResolutionNoneYet ->
                0

            ResolutionYes ->
                1

            ResolutionNo ->
                2

            ResolutionInvalid ->
                3

            ResolutionUnrecognized_ v ->
                v


toKindEncoder : Kind -> ( Int, Encode.Encoder )
toKindEncoder model =
    case model of
        KindUsername value ->
            ( 1, Encode.string value )


{-| `UserId` encoder
-}
toUserIdEncoder : UserId -> Encode.Encoder
toUserIdEncoder model =
    Encode.message
        [ Maybe.withDefault ( 0, Encode.none ) <| Maybe.map toKindEncoder model.kind
        ]


{-| `AuthToken` encoder
-}
toAuthTokenEncoder : AuthToken -> Encode.Encoder
toAuthTokenEncoder model =
    Encode.message
        [ ( 1, Encode.bytes model.hmacOfRest )
        , ( 2, (Maybe.withDefault Encode.none << Maybe.map toUserIdEncoder) model.owner )
        , ( 3, Encode.uint32 model.mintedUnixtime )
        , ( 4, Encode.uint32 model.expiresUnixtime )
        ]


{-| `CredentialsConfig` encoder
-}
toCredentialsConfigEncoder : CredentialsConfig -> Encode.Encoder
toCredentialsConfigEncoder model =
    Encode.message
        [ ( 1, (Maybe.withDefault Encode.none << Maybe.map toCredentialsConfigSmtpCredentialsEncoder) model.smtp )
        , ( 2, Encode.bytes model.tokenSigningSecret )
        ]


toCredentialsConfigSmtpCredentialsEncoder : CredentialsConfigSmtpCredentials -> Encode.Encoder
toCredentialsConfigSmtpCredentialsEncoder model =
    Encode.message
        [ ( 1, Encode.string model.hostname )
        , ( 2, Encode.uint32 model.port_ )
        , ( 3, Encode.string model.username )
        , ( 4, Encode.string model.password )
        , ( 5, Encode.string model.fromAddr )
        ]


{-| `InvitationId` encoder
-}
toInvitationIdEncoder : InvitationId -> Encode.Encoder
toInvitationIdEncoder model =
    Encode.message
        [ ( 1, (Maybe.withDefault Encode.none << Maybe.map toUserIdEncoder) model.inviter )
        , ( 2, Encode.string model.nonce )
        ]


{-| `Invitation` encoder
-}
toInvitationEncoder : Invitation -> Encode.Encoder
toInvitationEncoder model =
    Encode.message
        [ ( 2, Encode.uint32 model.createdUnixtime )
        , ( 3, Encode.string model.notes )
        , ( 4, (Maybe.withDefault Encode.none << Maybe.map toUserIdEncoder) model.acceptedBy )
        , ( 5, Encode.uint32 model.acceptedUnixtime )
        ]


toEmailFlowStateKindEncoder : EmailFlowStateKind -> ( Int, Encode.Encoder )
toEmailFlowStateKindEncoder model =
    case model of
        EmailFlowStateKindUnstarted value ->
            ( 1, toVoidEncoder value )

        EmailFlowStateKindCodeSent value ->
            ( 2, toEmailFlowStateCodeSentEncoder value )

        EmailFlowStateKindVerified value ->
            ( 3, Encode.string value )


{-| `EmailFlowState` encoder
-}
toEmailFlowStateEncoder : EmailFlowState -> Encode.Encoder
toEmailFlowStateEncoder model =
    Encode.message
        [ Maybe.withDefault ( 0, Encode.none ) <| Maybe.map toEmailFlowStateKindEncoder model.emailFlowStateKind
        ]


toEmailFlowStateCodeSentEncoder : EmailFlowStateCodeSent -> Encode.Encoder
toEmailFlowStateCodeSentEncoder model =
    Encode.message
        [ ( 1, Encode.string model.email )
        , ( 2, (Maybe.withDefault Encode.none << Maybe.map toHashedPasswordEncoder) model.code )
        ]


{-| `HashedPassword` encoder
-}
toHashedPasswordEncoder : HashedPassword -> Encode.Encoder
toHashedPasswordEncoder model =
    Encode.message
        [ ( 1, Encode.bytes model.salt )
        , ( 2, Encode.bytes model.scrypt )
        ]


{-| `GenericUserInfo` encoder
-}
toGenericUserInfoEncoder : GenericUserInfo -> Encode.Encoder
toGenericUserInfoEncoder model =
    Encode.message
        [ ( 1, Encode.list toUserIdEncoder model.trustedUsers )
        , ( 2, (Maybe.withDefault Encode.none << Maybe.map toEmailFlowStateEncoder) model.email )
        , ( 3, Encode.bool model.emailRemindersToResolve )
        , ( 4, Encode.bool model.emailResolutionNotifications )
        , ( 5, Encode.dict Encode.string (Maybe.withDefault Encode.none << Maybe.map toInvitationEncoder) model.invitations )
        ]


{-| `UsernameInfo` encoder
-}
toUsernameInfoEncoder : UsernameInfo -> Encode.Encoder
toUsernameInfoEncoder model =
    Encode.message
        [ ( 1, (Maybe.withDefault Encode.none << Maybe.map toGenericUserInfoEncoder) model.info )
        , ( 2, (Maybe.withDefault Encode.none << Maybe.map toHashedPasswordEncoder) model.password )
        ]


{-| `WorldState` encoder
-}
toWorldStateEncoder : WorldState -> Encode.Encoder
toWorldStateEncoder model =
    Encode.message
        [ ( 1, Encode.dict Encode.string (Maybe.withDefault Encode.none << Maybe.map toUsernameInfoEncoder) model.usernameUsers )
        , ( 2, Encode.dict Encode.uint32 (Maybe.withDefault Encode.none << Maybe.map toWorldStatePredictionEncoder) model.predictions )
        , ( 3, Encode.uint32 model.emailRemindersSentUpToUnixtime )
        ]


toWorldStatePredictionEncoder : WorldStatePrediction -> Encode.Encoder
toWorldStatePredictionEncoder model =
    Encode.message
        [ ( 1, Encode.string model.prediction )
        , ( 2, (Maybe.withDefault Encode.none << Maybe.map toCertaintyRangeEncoder) model.certainty )
        , ( 3, Encode.uint32 model.maximumStakeCents )
        , ( 4, Encode.uint32 model.createdUnixtime )
        , ( 5, Encode.uint32 model.closesUnixtime )
        , ( 11, Encode.uint32 model.resolvesAtUnixtime )
        , ( 6, Encode.string model.specialRules )
        , ( 7, (Maybe.withDefault Encode.none << Maybe.map toUserIdEncoder) model.creator )
        , ( 8, Encode.list toTradeEncoder model.trades )
        , ( 10, Encode.list toResolutionEventEncoder model.resolutions )
        ]


{-| `ResolutionEvent` encoder
-}
toResolutionEventEncoder : ResolutionEvent -> Encode.Encoder
toResolutionEventEncoder model =
    Encode.message
        [ ( 1, Encode.uint32 model.unixtime )
        , ( 2, toResolutionEncoder model.resolution )
        , ( 3, Encode.string model.notes )
        ]


{-| `Trade` encoder
-}
toTradeEncoder : Trade -> Encode.Encoder
toTradeEncoder model =
    Encode.message
        [ ( 1, (Maybe.withDefault Encode.none << Maybe.map toUserIdEncoder) model.bettor )
        , ( 2, Encode.bool model.bettorIsASkeptic )
        , ( 3, Encode.uint32 model.bettorStakeCents )
        , ( 4, Encode.uint32 model.creatorStakeCents )
        , ( 5, Encode.uint32 model.transactedUnixtime )
        ]


{-| `WhoamiRequest` encoder
-}
toWhoamiRequestEncoder : WhoamiRequest -> Encode.Encoder
toWhoamiRequestEncoder model =
    Encode.message
        []


{-| `WhoamiResponse` encoder
-}
toWhoamiResponseEncoder : WhoamiResponse -> Encode.Encoder
toWhoamiResponseEncoder model =
    Encode.message
        [ ( 1, (Maybe.withDefault Encode.none << Maybe.map toAuthTokenEncoder) model.auth )
        ]


{-| `SignOutRequest` encoder
-}
toSignOutRequestEncoder : SignOutRequest -> Encode.Encoder
toSignOutRequestEncoder model =
    Encode.message
        []


{-| `SignOutResponse` encoder
-}
toSignOutResponseEncoder : SignOutResponse -> Encode.Encoder
toSignOutResponseEncoder model =
    Encode.message
        []


{-| `RegisterUsernameRequest` encoder
-}
toRegisterUsernameRequestEncoder : RegisterUsernameRequest -> Encode.Encoder
toRegisterUsernameRequestEncoder model =
    Encode.message
        [ ( 1, Encode.string model.username )
        , ( 2, Encode.string model.password )
        ]


toRegisterUsernameResultEncoder : RegisterUsernameResult -> ( Int, Encode.Encoder )
toRegisterUsernameResultEncoder model =
    case model of
        RegisterUsernameResultOk value ->
            ( 1, toAuthTokenEncoder value )

        RegisterUsernameResultError value ->
            ( 2, toRegisterUsernameResponseErrorEncoder value )


{-| `RegisterUsernameResponse` encoder
-}
toRegisterUsernameResponseEncoder : RegisterUsernameResponse -> Encode.Encoder
toRegisterUsernameResponseEncoder model =
    Encode.message
        [ Maybe.withDefault ( 0, Encode.none ) <| Maybe.map toRegisterUsernameResultEncoder model.registerUsernameResult
        ]


toRegisterUsernameResponseErrorEncoder : RegisterUsernameResponseError -> Encode.Encoder
toRegisterUsernameResponseErrorEncoder model =
    Encode.message
        [ ( 1, Encode.string model.catchall )
        , ( 2, toVoidEncoder model.usernameTaken )
        ]


{-| `LogInUsernameRequest` encoder
-}
toLogInUsernameRequestEncoder : LogInUsernameRequest -> Encode.Encoder
toLogInUsernameRequestEncoder model =
    Encode.message
        [ ( 1, Encode.string model.username )
        , ( 2, Encode.string model.password )
        ]


toLogInUsernameResultEncoder : LogInUsernameResult -> ( Int, Encode.Encoder )
toLogInUsernameResultEncoder model =
    case model of
        LogInUsernameResultOk value ->
            ( 1, toAuthTokenEncoder value )

        LogInUsernameResultError value ->
            ( 2, toLogInUsernameResponseErrorEncoder value )


{-| `LogInUsernameResponse` encoder
-}
toLogInUsernameResponseEncoder : LogInUsernameResponse -> Encode.Encoder
toLogInUsernameResponseEncoder model =
    Encode.message
        [ Maybe.withDefault ( 0, Encode.none ) <| Maybe.map toLogInUsernameResultEncoder model.logInUsernameResult
        ]


toLogInUsernameResponseErrorEncoder : LogInUsernameResponseError -> Encode.Encoder
toLogInUsernameResponseErrorEncoder model =
    Encode.message
        [ ( 1, Encode.string model.catchall )
        ]


{-| `CertaintyRange` encoder
-}
toCertaintyRangeEncoder : CertaintyRange -> Encode.Encoder
toCertaintyRangeEncoder model =
    Encode.message
        [ ( 1, Encode.float model.low )
        , ( 2, Encode.float model.high )
        ]


{-| `CreatePredictionRequest` encoder
-}
toCreatePredictionRequestEncoder : CreatePredictionRequest -> Encode.Encoder
toCreatePredictionRequestEncoder model =
    Encode.message
        [ ( 2, Encode.string model.prediction )
        , ( 4, (Maybe.withDefault Encode.none << Maybe.map toCertaintyRangeEncoder) model.certainty )
        , ( 5, Encode.uint32 model.maximumStakeCents )
        , ( 6, Encode.uint32 model.openSeconds )
        , ( 7, Encode.string model.specialRules )
        , ( 8, Encode.uint32 model.resolvesAtUnixtime )
        ]


toCreatePredictionResultEncoder : CreatePredictionResult -> ( Int, Encode.Encoder )
toCreatePredictionResultEncoder model =
    case model of
        CreatePredictionResultNewPredictionId value ->
            ( 1, Encode.uint32 value )

        CreatePredictionResultError value ->
            ( 2, toCreatePredictionResponseErrorEncoder value )


{-| `CreatePredictionResponse` encoder
-}
toCreatePredictionResponseEncoder : CreatePredictionResponse -> Encode.Encoder
toCreatePredictionResponseEncoder model =
    Encode.message
        [ Maybe.withDefault ( 0, Encode.none ) <| Maybe.map toCreatePredictionResultEncoder model.createPredictionResult
        ]


toCreatePredictionResponseErrorEncoder : CreatePredictionResponseError -> Encode.Encoder
toCreatePredictionResponseErrorEncoder model =
    Encode.message
        [ ( 1, Encode.string model.catchall )
        ]


{-| `GetPredictionRequest` encoder
-}
toGetPredictionRequestEncoder : GetPredictionRequest -> Encode.Encoder
toGetPredictionRequestEncoder model =
    Encode.message
        [ ( 2, Encode.uint32 model.predictionId )
        ]


toGetPredictionResultEncoder : GetPredictionResult -> ( Int, Encode.Encoder )
toGetPredictionResultEncoder model =
    case model of
        GetPredictionResultPrediction value ->
            ( 1, toUserPredictionViewEncoder value )

        GetPredictionResultError value ->
            ( 2, toGetPredictionResponseErrorEncoder value )


{-| `GetPredictionResponse` encoder
-}
toGetPredictionResponseEncoder : GetPredictionResponse -> Encode.Encoder
toGetPredictionResponseEncoder model =
    Encode.message
        [ Maybe.withDefault ( 0, Encode.none ) <| Maybe.map toGetPredictionResultEncoder model.getPredictionResult
        ]


toGetPredictionResponseErrorEncoder : GetPredictionResponseError -> Encode.Encoder
toGetPredictionResponseErrorEncoder model =
    Encode.message
        [ ( 1, Encode.string model.catchall )
        , ( 2, toVoidEncoder model.noSuchPrediction )
        ]


{-| `UserPredictionView` encoder
-}
toUserPredictionViewEncoder : UserPredictionView -> Encode.Encoder
toUserPredictionViewEncoder model =
    Encode.message
        [ ( 1, Encode.string model.prediction )
        , ( 2, (Maybe.withDefault Encode.none << Maybe.map toCertaintyRangeEncoder) model.certainty )
        , ( 3, Encode.uint32 model.maximumStakeCents )
        , ( 4, Encode.uint32 model.remainingStakeCentsVsBelievers )
        , ( 5, Encode.uint32 model.remainingStakeCentsVsSkeptics )
        , ( 6, Encode.uint32 model.createdUnixtime )
        , ( 7, Encode.uint32 model.closesUnixtime )
        , ( 8, Encode.string model.specialRules )
        , ( 9, (Maybe.withDefault Encode.none << Maybe.map toUserUserViewEncoder) model.creator )
        , ( 10, Encode.list toResolutionEventEncoder model.resolutions )
        , ( 11, Encode.list toTradeEncoder model.yourTrades )
        , ( 12, Encode.uint32 model.resolvesAtUnixtime )
        ]


{-| `UserUserView` encoder
-}
toUserUserViewEncoder : UserUserView -> Encode.Encoder
toUserUserViewEncoder model =
    Encode.message
        [ ( 1, Encode.string model.displayName )
        , ( 2, Encode.bool model.isSelf )
        , ( 3, Encode.bool model.isTrusted )
        , ( 4, Encode.bool model.trustsYou )
        ]


{-| `ListMyStakesRequest` encoder
-}
toListMyStakesRequestEncoder : ListMyStakesRequest -> Encode.Encoder
toListMyStakesRequestEncoder model =
    Encode.message
        []


toListMyStakesResultEncoder : ListMyStakesResult -> ( Int, Encode.Encoder )
toListMyStakesResultEncoder model =
    case model of
        ListMyStakesResultOk value ->
            ( 1, toPredictionsByIdEncoder value )

        ListMyStakesResultError value ->
            ( 2, toListMyStakesResponseErrorEncoder value )


{-| `ListMyStakesResponse` encoder
-}
toListMyStakesResponseEncoder : ListMyStakesResponse -> Encode.Encoder
toListMyStakesResponseEncoder model =
    Encode.message
        [ Maybe.withDefault ( 0, Encode.none ) <| Maybe.map toListMyStakesResultEncoder model.listMyStakesResult
        ]


toListMyStakesResponseErrorEncoder : ListMyStakesResponseError -> Encode.Encoder
toListMyStakesResponseErrorEncoder model =
    Encode.message
        [ ( 1, Encode.string model.catchall )
        , ( 2, toVoidEncoder model.noSuchPrediction )
        ]


{-| `PredictionsById` encoder
-}
toPredictionsByIdEncoder : PredictionsById -> Encode.Encoder
toPredictionsByIdEncoder model =
    Encode.message
        [ ( 1, Encode.dict Encode.uint32 (Maybe.withDefault Encode.none << Maybe.map toUserPredictionViewEncoder) model.predictions )
        ]


{-| `StakeRequest` encoder
-}
toStakeRequestEncoder : StakeRequest -> Encode.Encoder
toStakeRequestEncoder model =
    Encode.message
        [ ( 2, Encode.uint32 model.predictionId )
        , ( 3, Encode.bool model.bettorIsASkeptic )
        , ( 4, Encode.uint32 model.bettorStakeCents )
        ]


toStakeResultEncoder : StakeResult -> ( Int, Encode.Encoder )
toStakeResultEncoder model =
    case model of
        StakeResultOk value ->
            ( 1, toVoidEncoder value )

        StakeResultError value ->
            ( 2, toStakeResponseErrorEncoder value )


{-| `StakeResponse` encoder
-}
toStakeResponseEncoder : StakeResponse -> Encode.Encoder
toStakeResponseEncoder model =
    Encode.message
        [ Maybe.withDefault ( 0, Encode.none ) <| Maybe.map toStakeResultEncoder model.stakeResult
        ]


toStakeResponseErrorEncoder : StakeResponseError -> Encode.Encoder
toStakeResponseErrorEncoder model =
    Encode.message
        [ ( 1, Encode.string model.catchall )
        ]


{-| `ResolveRequest` encoder
-}
toResolveRequestEncoder : ResolveRequest -> Encode.Encoder
toResolveRequestEncoder model =
    Encode.message
        [ ( 1, Encode.uint32 model.predictionId )
        , ( 2, toResolutionEncoder model.resolution )
        , ( 3, Encode.string model.notes )
        ]


toResolveResultEncoder : ResolveResult -> ( Int, Encode.Encoder )
toResolveResultEncoder model =
    case model of
        ResolveResultOk value ->
            ( 1, toVoidEncoder value )

        ResolveResultError value ->
            ( 2, toResolveResponseErrorEncoder value )


{-| `ResolveResponse` encoder
-}
toResolveResponseEncoder : ResolveResponse -> Encode.Encoder
toResolveResponseEncoder model =
    Encode.message
        [ Maybe.withDefault ( 0, Encode.none ) <| Maybe.map toResolveResultEncoder model.resolveResult
        ]


toResolveResponseErrorEncoder : ResolveResponseError -> Encode.Encoder
toResolveResponseErrorEncoder model =
    Encode.message
        [ ( 1, Encode.string model.catchall )
        ]


{-| `SetTrustedRequest` encoder
-}
toSetTrustedRequestEncoder : SetTrustedRequest -> Encode.Encoder
toSetTrustedRequestEncoder model =
    Encode.message
        [ ( 1, (Maybe.withDefault Encode.none << Maybe.map toUserIdEncoder) model.who )
        , ( 2, Encode.bool model.trusted )
        ]


toSetTrustedResultEncoder : SetTrustedResult -> ( Int, Encode.Encoder )
toSetTrustedResultEncoder model =
    case model of
        SetTrustedResultOk value ->
            ( 1, toVoidEncoder value )

        SetTrustedResultError value ->
            ( 2, toSetTrustedResponseErrorEncoder value )


{-| `SetTrustedResponse` encoder
-}
toSetTrustedResponseEncoder : SetTrustedResponse -> Encode.Encoder
toSetTrustedResponseEncoder model =
    Encode.message
        [ Maybe.withDefault ( 0, Encode.none ) <| Maybe.map toSetTrustedResultEncoder model.setTrustedResult
        ]


toSetTrustedResponseErrorEncoder : SetTrustedResponseError -> Encode.Encoder
toSetTrustedResponseErrorEncoder model =
    Encode.message
        [ ( 1, Encode.string model.catchall )
        ]


{-| `GetUserRequest` encoder
-}
toGetUserRequestEncoder : GetUserRequest -> Encode.Encoder
toGetUserRequestEncoder model =
    Encode.message
        [ ( 1, (Maybe.withDefault Encode.none << Maybe.map toUserIdEncoder) model.who )
        ]


toGetUserResultEncoder : GetUserResult -> ( Int, Encode.Encoder )
toGetUserResultEncoder model =
    case model of
        GetUserResultOk value ->
            ( 1, toUserUserViewEncoder value )

        GetUserResultError value ->
            ( 2, toGetUserResponseErrorEncoder value )


{-| `GetUserResponse` encoder
-}
toGetUserResponseEncoder : GetUserResponse -> Encode.Encoder
toGetUserResponseEncoder model =
    Encode.message
        [ Maybe.withDefault ( 0, Encode.none ) <| Maybe.map toGetUserResultEncoder model.getUserResult
        ]


toGetUserResponseErrorEncoder : GetUserResponseError -> Encode.Encoder
toGetUserResponseErrorEncoder model =
    Encode.message
        [ ( 1, Encode.string model.catchall )
        ]


{-| `ChangePasswordRequest` encoder
-}
toChangePasswordRequestEncoder : ChangePasswordRequest -> Encode.Encoder
toChangePasswordRequestEncoder model =
    Encode.message
        [ ( 1, Encode.string model.oldPassword )
        , ( 2, Encode.string model.newPassword )
        ]


toChangePasswordResultEncoder : ChangePasswordResult -> ( Int, Encode.Encoder )
toChangePasswordResultEncoder model =
    case model of
        ChangePasswordResultOk value ->
            ( 1, toVoidEncoder value )

        ChangePasswordResultError value ->
            ( 2, toChangePasswordResponseErrorEncoder value )


{-| `ChangePasswordResponse` encoder
-}
toChangePasswordResponseEncoder : ChangePasswordResponse -> Encode.Encoder
toChangePasswordResponseEncoder model =
    Encode.message
        [ Maybe.withDefault ( 0, Encode.none ) <| Maybe.map toChangePasswordResultEncoder model.changePasswordResult
        ]


toChangePasswordResponseErrorEncoder : ChangePasswordResponseError -> Encode.Encoder
toChangePasswordResponseErrorEncoder model =
    Encode.message
        [ ( 1, Encode.string model.catchall )
        ]


{-| `SetEmailRequest` encoder
-}
toSetEmailRequestEncoder : SetEmailRequest -> Encode.Encoder
toSetEmailRequestEncoder model =
    Encode.message
        [ ( 1, Encode.string model.email )
        ]


toSetEmailResultEncoder : SetEmailResult -> ( Int, Encode.Encoder )
toSetEmailResultEncoder model =
    case model of
        SetEmailResultOk value ->
            ( 1, toVoidEncoder value )

        SetEmailResultError value ->
            ( 2, toSetEmailResponseErrorEncoder value )


{-| `SetEmailResponse` encoder
-}
toSetEmailResponseEncoder : SetEmailResponse -> Encode.Encoder
toSetEmailResponseEncoder model =
    Encode.message
        [ Maybe.withDefault ( 0, Encode.none ) <| Maybe.map toSetEmailResultEncoder model.setEmailResult
        ]


toSetEmailResponseErrorEncoder : SetEmailResponseError -> Encode.Encoder
toSetEmailResponseErrorEncoder model =
    Encode.message
        [ ( 1, Encode.string model.catchall )
        ]


{-| `VerifyEmailRequest` encoder
-}
toVerifyEmailRequestEncoder : VerifyEmailRequest -> Encode.Encoder
toVerifyEmailRequestEncoder model =
    Encode.message
        [ ( 1, Encode.string model.code )
        ]


toVerifyEmailResultEncoder : VerifyEmailResult -> ( Int, Encode.Encoder )
toVerifyEmailResultEncoder model =
    case model of
        VerifyEmailResultVerifiedEmail value ->
            ( 1, Encode.string value )

        VerifyEmailResultError value ->
            ( 2, toVerifyEmailResponseErrorEncoder value )


{-| `VerifyEmailResponse` encoder
-}
toVerifyEmailResponseEncoder : VerifyEmailResponse -> Encode.Encoder
toVerifyEmailResponseEncoder model =
    Encode.message
        [ Maybe.withDefault ( 0, Encode.none ) <| Maybe.map toVerifyEmailResultEncoder model.verifyEmailResult
        ]


toVerifyEmailResponseErrorEncoder : VerifyEmailResponseError -> Encode.Encoder
toVerifyEmailResponseErrorEncoder model =
    Encode.message
        [ ( 1, Encode.string model.catchall )
        ]


{-| `GetSettingsRequest` encoder
-}
toGetSettingsRequestEncoder : GetSettingsRequest -> Encode.Encoder
toGetSettingsRequestEncoder model =
    Encode.message
        []


toGetSettingsResultEncoder : GetSettingsResult -> ( Int, Encode.Encoder )
toGetSettingsResultEncoder model =
    case model of
        GetSettingsResultOkUsername value ->
            ( 1, toUsernameInfoEncoder value )

        GetSettingsResultError value ->
            ( 2, toGetSettingsResponseErrorEncoder value )


{-| `GetSettingsResponse` encoder
-}
toGetSettingsResponseEncoder : GetSettingsResponse -> Encode.Encoder
toGetSettingsResponseEncoder model =
    Encode.message
        [ Maybe.withDefault ( 0, Encode.none ) <| Maybe.map toGetSettingsResultEncoder model.getSettingsResult
        ]


toGetSettingsResponseErrorEncoder : GetSettingsResponseError -> Encode.Encoder
toGetSettingsResponseErrorEncoder model =
    Encode.message
        [ ( 1, Encode.string model.catchall )
        ]


{-| `MaybeBool` encoder
-}
toMaybeBoolEncoder : MaybeBool -> Encode.Encoder
toMaybeBoolEncoder model =
    Encode.message
        [ ( 1, Encode.bool model.value )
        ]


{-| `UpdateSettingsRequest` encoder
-}
toUpdateSettingsRequestEncoder : UpdateSettingsRequest -> Encode.Encoder
toUpdateSettingsRequestEncoder model =
    Encode.message
        [ ( 1, (Maybe.withDefault Encode.none << Maybe.map toMaybeBoolEncoder) model.emailRemindersToResolve )
        , ( 2, (Maybe.withDefault Encode.none << Maybe.map toMaybeBoolEncoder) model.emailResolutionNotifications )
        ]


toUpdateSettingsResultEncoder : UpdateSettingsResult -> ( Int, Encode.Encoder )
toUpdateSettingsResultEncoder model =
    case model of
        UpdateSettingsResultOk value ->
            ( 1, toGenericUserInfoEncoder value )

        UpdateSettingsResultError value ->
            ( 2, toUpdateSettingsResponseErrorEncoder value )


{-| `UpdateSettingsResponse` encoder
-}
toUpdateSettingsResponseEncoder : UpdateSettingsResponse -> Encode.Encoder
toUpdateSettingsResponseEncoder model =
    Encode.message
        [ Maybe.withDefault ( 0, Encode.none ) <| Maybe.map toUpdateSettingsResultEncoder model.updateSettingsResult
        ]


toUpdateSettingsResponseErrorEncoder : UpdateSettingsResponseError -> Encode.Encoder
toUpdateSettingsResponseErrorEncoder model =
    Encode.message
        [ ( 1, Encode.string model.catchall )
        ]


{-| `CreateInvitationRequest` encoder
-}
toCreateInvitationRequestEncoder : CreateInvitationRequest -> Encode.Encoder
toCreateInvitationRequestEncoder model =
    Encode.message
        [ ( 1, Encode.string model.notes )
        ]


toCreateInvitationResultEncoder : CreateInvitationResult -> ( Int, Encode.Encoder )
toCreateInvitationResultEncoder model =
    case model of
        CreateInvitationResultOk value ->
            ( 1, toCreateInvitationResponseResultEncoder value )

        CreateInvitationResultError value ->
            ( 2, toCreateInvitationResponseErrorEncoder value )


{-| `CreateInvitationResponse` encoder
-}
toCreateInvitationResponseEncoder : CreateInvitationResponse -> Encode.Encoder
toCreateInvitationResponseEncoder model =
    Encode.message
        [ Maybe.withDefault ( 0, Encode.none ) <| Maybe.map toCreateInvitationResultEncoder model.createInvitationResult
        ]


toCreateInvitationResponseResultEncoder : CreateInvitationResponseResult -> Encode.Encoder
toCreateInvitationResponseResultEncoder model =
    Encode.message
        [ ( 1, Encode.string model.nonce )
        , ( 2, (Maybe.withDefault Encode.none << Maybe.map toInvitationEncoder) model.invitation )
        ]


toCreateInvitationResponseErrorEncoder : CreateInvitationResponseError -> Encode.Encoder
toCreateInvitationResponseErrorEncoder model =
    Encode.message
        [ ( 1, Encode.string model.catchall )
        ]


{-| `AcceptInvitationRequest` encoder
-}
toAcceptInvitationRequestEncoder : AcceptInvitationRequest -> Encode.Encoder
toAcceptInvitationRequestEncoder model =
    Encode.message
        [ ( 1, (Maybe.withDefault Encode.none << Maybe.map toInvitationIdEncoder) model.invitationId )
        ]


toAcceptInvitationResultEncoder : AcceptInvitationResult -> ( Int, Encode.Encoder )
toAcceptInvitationResultEncoder model =
    case model of
        AcceptInvitationResultOk value ->
            ( 1, toVoidEncoder value )

        AcceptInvitationResultError value ->
            ( 2, toAcceptInvitationResponseErrorEncoder value )


{-| `AcceptInvitationResponse` encoder
-}
toAcceptInvitationResponseEncoder : AcceptInvitationResponse -> Encode.Encoder
toAcceptInvitationResponseEncoder model =
    Encode.message
        [ Maybe.withDefault ( 0, Encode.none ) <| Maybe.map toAcceptInvitationResultEncoder model.acceptInvitationResult
        ]


toAcceptInvitationResponseErrorEncoder : AcceptInvitationResponseError -> Encode.Encoder
toAcceptInvitationResponseErrorEncoder model =
    Encode.message
        [ ( 1, Encode.string model.catchall )
        ]



-- SETTERS


setKind : a -> { b | kind : a } -> { b | kind : a }
setKind value model =
    { model | kind = value }


setHmacOfRest : a -> { b | hmacOfRest : a } -> { b | hmacOfRest : a }
setHmacOfRest value model =
    { model | hmacOfRest = value }


setOwner : a -> { b | owner : a } -> { b | owner : a }
setOwner value model =
    { model | owner = value }


setMintedUnixtime : a -> { b | mintedUnixtime : a } -> { b | mintedUnixtime : a }
setMintedUnixtime value model =
    { model | mintedUnixtime = value }


setExpiresUnixtime : a -> { b | expiresUnixtime : a } -> { b | expiresUnixtime : a }
setExpiresUnixtime value model =
    { model | expiresUnixtime = value }


setSmtp : a -> { b | smtp : a } -> { b | smtp : a }
setSmtp value model =
    { model | smtp = value }


setTokenSigningSecret : a -> { b | tokenSigningSecret : a } -> { b | tokenSigningSecret : a }
setTokenSigningSecret value model =
    { model | tokenSigningSecret = value }


setHostname : a -> { b | hostname : a } -> { b | hostname : a }
setHostname value model =
    { model | hostname = value }


setPort_ : a -> { b | port_ : a } -> { b | port_ : a }
setPort_ value model =
    { model | port_ = value }


setUsername : a -> { b | username : a } -> { b | username : a }
setUsername value model =
    { model | username = value }


setPassword : a -> { b | password : a } -> { b | password : a }
setPassword value model =
    { model | password = value }


setFromAddr : a -> { b | fromAddr : a } -> { b | fromAddr : a }
setFromAddr value model =
    { model | fromAddr = value }


setInviter : a -> { b | inviter : a } -> { b | inviter : a }
setInviter value model =
    { model | inviter = value }


setNonce : a -> { b | nonce : a } -> { b | nonce : a }
setNonce value model =
    { model | nonce = value }


setCreatedUnixtime : a -> { b | createdUnixtime : a } -> { b | createdUnixtime : a }
setCreatedUnixtime value model =
    { model | createdUnixtime = value }


setNotes : a -> { b | notes : a } -> { b | notes : a }
setNotes value model =
    { model | notes = value }


setAcceptedBy : a -> { b | acceptedBy : a } -> { b | acceptedBy : a }
setAcceptedBy value model =
    { model | acceptedBy = value }


setAcceptedUnixtime : a -> { b | acceptedUnixtime : a } -> { b | acceptedUnixtime : a }
setAcceptedUnixtime value model =
    { model | acceptedUnixtime = value }


setEmailFlowStateKind : a -> { b | emailFlowStateKind : a } -> { b | emailFlowStateKind : a }
setEmailFlowStateKind value model =
    { model | emailFlowStateKind = value }


setEmail : a -> { b | email : a } -> { b | email : a }
setEmail value model =
    { model | email = value }


setCode : a -> { b | code : a } -> { b | code : a }
setCode value model =
    { model | code = value }


setSalt : a -> { b | salt : a } -> { b | salt : a }
setSalt value model =
    { model | salt = value }


setScrypt : a -> { b | scrypt : a } -> { b | scrypt : a }
setScrypt value model =
    { model | scrypt = value }


setTrustedUsers : a -> { b | trustedUsers : a } -> { b | trustedUsers : a }
setTrustedUsers value model =
    { model | trustedUsers = value }


setEmailRemindersToResolve : a -> { b | emailRemindersToResolve : a } -> { b | emailRemindersToResolve : a }
setEmailRemindersToResolve value model =
    { model | emailRemindersToResolve = value }


setEmailResolutionNotifications : a -> { b | emailResolutionNotifications : a } -> { b | emailResolutionNotifications : a }
setEmailResolutionNotifications value model =
    { model | emailResolutionNotifications = value }


setInvitations : a -> { b | invitations : a } -> { b | invitations : a }
setInvitations value model =
    { model | invitations = value }


setInfo : a -> { b | info : a } -> { b | info : a }
setInfo value model =
    { model | info = value }


setUsernameUsers : a -> { b | usernameUsers : a } -> { b | usernameUsers : a }
setUsernameUsers value model =
    { model | usernameUsers = value }


setPredictions : a -> { b | predictions : a } -> { b | predictions : a }
setPredictions value model =
    { model | predictions = value }


setEmailRemindersSentUpToUnixtime : a -> { b | emailRemindersSentUpToUnixtime : a } -> { b | emailRemindersSentUpToUnixtime : a }
setEmailRemindersSentUpToUnixtime value model =
    { model | emailRemindersSentUpToUnixtime = value }


setPrediction : a -> { b | prediction : a } -> { b | prediction : a }
setPrediction value model =
    { model | prediction = value }


setCertainty : a -> { b | certainty : a } -> { b | certainty : a }
setCertainty value model =
    { model | certainty = value }


setMaximumStakeCents : a -> { b | maximumStakeCents : a } -> { b | maximumStakeCents : a }
setMaximumStakeCents value model =
    { model | maximumStakeCents = value }


setClosesUnixtime : a -> { b | closesUnixtime : a } -> { b | closesUnixtime : a }
setClosesUnixtime value model =
    { model | closesUnixtime = value }


setResolvesAtUnixtime : a -> { b | resolvesAtUnixtime : a } -> { b | resolvesAtUnixtime : a }
setResolvesAtUnixtime value model =
    { model | resolvesAtUnixtime = value }


setSpecialRules : a -> { b | specialRules : a } -> { b | specialRules : a }
setSpecialRules value model =
    { model | specialRules = value }


setCreator : a -> { b | creator : a } -> { b | creator : a }
setCreator value model =
    { model | creator = value }


setTrades : a -> { b | trades : a } -> { b | trades : a }
setTrades value model =
    { model | trades = value }


setResolutions : a -> { b | resolutions : a } -> { b | resolutions : a }
setResolutions value model =
    { model | resolutions = value }


setUnixtime : a -> { b | unixtime : a } -> { b | unixtime : a }
setUnixtime value model =
    { model | unixtime = value }


setResolution : a -> { b | resolution : a } -> { b | resolution : a }
setResolution value model =
    { model | resolution = value }


setBettor : a -> { b | bettor : a } -> { b | bettor : a }
setBettor value model =
    { model | bettor = value }


setBettorIsASkeptic : a -> { b | bettorIsASkeptic : a } -> { b | bettorIsASkeptic : a }
setBettorIsASkeptic value model =
    { model | bettorIsASkeptic = value }


setBettorStakeCents : a -> { b | bettorStakeCents : a } -> { b | bettorStakeCents : a }
setBettorStakeCents value model =
    { model | bettorStakeCents = value }


setCreatorStakeCents : a -> { b | creatorStakeCents : a } -> { b | creatorStakeCents : a }
setCreatorStakeCents value model =
    { model | creatorStakeCents = value }


setTransactedUnixtime : a -> { b | transactedUnixtime : a } -> { b | transactedUnixtime : a }
setTransactedUnixtime value model =
    { model | transactedUnixtime = value }


setAuth : a -> { b | auth : a } -> { b | auth : a }
setAuth value model =
    { model | auth = value }


setRegisterUsernameResult : a -> { b | registerUsernameResult : a } -> { b | registerUsernameResult : a }
setRegisterUsernameResult value model =
    { model | registerUsernameResult = value }


setCatchall : a -> { b | catchall : a } -> { b | catchall : a }
setCatchall value model =
    { model | catchall = value }


setUsernameTaken : a -> { b | usernameTaken : a } -> { b | usernameTaken : a }
setUsernameTaken value model =
    { model | usernameTaken = value }


setLogInUsernameResult : a -> { b | logInUsernameResult : a } -> { b | logInUsernameResult : a }
setLogInUsernameResult value model =
    { model | logInUsernameResult = value }


setLow : a -> { b | low : a } -> { b | low : a }
setLow value model =
    { model | low = value }


setHigh : a -> { b | high : a } -> { b | high : a }
setHigh value model =
    { model | high = value }


setOpenSeconds : a -> { b | openSeconds : a } -> { b | openSeconds : a }
setOpenSeconds value model =
    { model | openSeconds = value }


setCreatePredictionResult : a -> { b | createPredictionResult : a } -> { b | createPredictionResult : a }
setCreatePredictionResult value model =
    { model | createPredictionResult = value }


setPredictionId : a -> { b | predictionId : a } -> { b | predictionId : a }
setPredictionId value model =
    { model | predictionId = value }


setGetPredictionResult : a -> { b | getPredictionResult : a } -> { b | getPredictionResult : a }
setGetPredictionResult value model =
    { model | getPredictionResult = value }


setNoSuchPrediction : a -> { b | noSuchPrediction : a } -> { b | noSuchPrediction : a }
setNoSuchPrediction value model =
    { model | noSuchPrediction = value }


setRemainingStakeCentsVsBelievers : a -> { b | remainingStakeCentsVsBelievers : a } -> { b | remainingStakeCentsVsBelievers : a }
setRemainingStakeCentsVsBelievers value model =
    { model | remainingStakeCentsVsBelievers = value }


setRemainingStakeCentsVsSkeptics : a -> { b | remainingStakeCentsVsSkeptics : a } -> { b | remainingStakeCentsVsSkeptics : a }
setRemainingStakeCentsVsSkeptics value model =
    { model | remainingStakeCentsVsSkeptics = value }


setYourTrades : a -> { b | yourTrades : a } -> { b | yourTrades : a }
setYourTrades value model =
    { model | yourTrades = value }


setDisplayName : a -> { b | displayName : a } -> { b | displayName : a }
setDisplayName value model =
    { model | displayName = value }


setIsSelf : a -> { b | isSelf : a } -> { b | isSelf : a }
setIsSelf value model =
    { model | isSelf = value }


setIsTrusted : a -> { b | isTrusted : a } -> { b | isTrusted : a }
setIsTrusted value model =
    { model | isTrusted = value }


setTrustsYou : a -> { b | trustsYou : a } -> { b | trustsYou : a }
setTrustsYou value model =
    { model | trustsYou = value }


setListMyStakesResult : a -> { b | listMyStakesResult : a } -> { b | listMyStakesResult : a }
setListMyStakesResult value model =
    { model | listMyStakesResult = value }


setStakeResult : a -> { b | stakeResult : a } -> { b | stakeResult : a }
setStakeResult value model =
    { model | stakeResult = value }


setResolveResult : a -> { b | resolveResult : a } -> { b | resolveResult : a }
setResolveResult value model =
    { model | resolveResult = value }


setWho : a -> { b | who : a } -> { b | who : a }
setWho value model =
    { model | who = value }


setTrusted : a -> { b | trusted : a } -> { b | trusted : a }
setTrusted value model =
    { model | trusted = value }


setSetTrustedResult : a -> { b | setTrustedResult : a } -> { b | setTrustedResult : a }
setSetTrustedResult value model =
    { model | setTrustedResult = value }


setGetUserResult : a -> { b | getUserResult : a } -> { b | getUserResult : a }
setGetUserResult value model =
    { model | getUserResult = value }


setOldPassword : a -> { b | oldPassword : a } -> { b | oldPassword : a }
setOldPassword value model =
    { model | oldPassword = value }


setNewPassword : a -> { b | newPassword : a } -> { b | newPassword : a }
setNewPassword value model =
    { model | newPassword = value }


setChangePasswordResult : a -> { b | changePasswordResult : a } -> { b | changePasswordResult : a }
setChangePasswordResult value model =
    { model | changePasswordResult = value }


setSetEmailResult : a -> { b | setEmailResult : a } -> { b | setEmailResult : a }
setSetEmailResult value model =
    { model | setEmailResult = value }


setVerifyEmailResult : a -> { b | verifyEmailResult : a } -> { b | verifyEmailResult : a }
setVerifyEmailResult value model =
    { model | verifyEmailResult = value }


setGetSettingsResult : a -> { b | getSettingsResult : a } -> { b | getSettingsResult : a }
setGetSettingsResult value model =
    { model | getSettingsResult = value }


setValue : a -> { b | value : a } -> { b | value : a }
setValue value model =
    { model | value = value }


setUpdateSettingsResult : a -> { b | updateSettingsResult : a } -> { b | updateSettingsResult : a }
setUpdateSettingsResult value model =
    { model | updateSettingsResult = value }


setCreateInvitationResult : a -> { b | createInvitationResult : a } -> { b | createInvitationResult : a }
setCreateInvitationResult value model =
    { model | createInvitationResult = value }


setInvitation : a -> { b | invitation : a } -> { b | invitation : a }
setInvitation value model =
    { model | invitation = value }


setInvitationId : a -> { b | invitationId : a } -> { b | invitationId : a }
setInvitationId value model =
    { model | invitationId = value }


setAcceptInvitationResult : a -> { b | acceptInvitationResult : a } -> { b | acceptInvitationResult : a }
setAcceptInvitationResult value model =
    { model | acceptInvitationResult = value }
