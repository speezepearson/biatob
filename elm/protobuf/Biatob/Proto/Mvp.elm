{- !!! DO NOT EDIT THIS FILE MANUALLY !!! -}


module Biatob.Proto.Mvp exposing
    ( Void(..), Resolution(..), Kind(..), UserId, AuthToken, WorldState, WorldStateGenericUserInfo, WorldStateUsernameInfo, WorldStateMarket, ResolutionEvent, Trade, WhoamiRequest, WhoamiResponse, SignOutRequest, SignOutResponse, RegisterUsernameRequest, RegisterUsernameResult(..), RegisterUsernameResponse, RegisterUsernameResponseError, LogInUsernameRequest, LogInUsernameResult(..), LogInUsernameResponse, LogInUsernameResponseError, CertaintyRange, PrivacyKind(..), MarketPrivacy, MarketPrivacyEmails, CreateMarketRequest, CreateMarketResult(..), CreateMarketResponse, CreateMarketResponseError, GetMarketRequest, GetMarketResult(..), GetMarketResponse, GetMarketResponseError, UserMarketView, UserUserView, ListMyMarketsRequest, ListMyMarketsResult(..), ListMyMarketsResponse, ListMyMarketsResponseError, MarketsById, StakeRequest, StakeResult(..), StakeResponse, StakeResponseError, ResolveRequest, ResolveResult(..), ResolveResponse, ResolveResponseError, SetTrustedRequest, SetTrustedResult(..), SetTrustedResponse, SetTrustedResponseError, GetUserRequest, GetUserResult(..), GetUserResponse, GetUserResponseError, ChangePasswordRequest, ChangePasswordResult(..), ChangePasswordResponse, ChangePasswordResponseError
    , userIdDecoder, authTokenDecoder, worldStateDecoder, resolutionEventDecoder, tradeDecoder, whoamiRequestDecoder, whoamiResponseDecoder, signOutRequestDecoder, signOutResponseDecoder, registerUsernameRequestDecoder, registerUsernameResponseDecoder, logInUsernameRequestDecoder, logInUsernameResponseDecoder, certaintyRangeDecoder, marketPrivacyDecoder, createMarketRequestDecoder, createMarketResponseDecoder, getMarketRequestDecoder, getMarketResponseDecoder, userMarketViewDecoder, userUserViewDecoder, listMyMarketsRequestDecoder, listMyMarketsResponseDecoder, marketsByIdDecoder, stakeRequestDecoder, stakeResponseDecoder, resolveRequestDecoder, resolveResponseDecoder, setTrustedRequestDecoder, setTrustedResponseDecoder, getUserRequestDecoder, getUserResponseDecoder, changePasswordRequestDecoder, changePasswordResponseDecoder
    , toUserIdEncoder, toAuthTokenEncoder, toWorldStateEncoder, toResolutionEventEncoder, toTradeEncoder, toWhoamiRequestEncoder, toWhoamiResponseEncoder, toSignOutRequestEncoder, toSignOutResponseEncoder, toRegisterUsernameRequestEncoder, toRegisterUsernameResponseEncoder, toLogInUsernameRequestEncoder, toLogInUsernameResponseEncoder, toCertaintyRangeEncoder, toMarketPrivacyEncoder, toCreateMarketRequestEncoder, toCreateMarketResponseEncoder, toGetMarketRequestEncoder, toGetMarketResponseEncoder, toUserMarketViewEncoder, toUserUserViewEncoder, toListMyMarketsRequestEncoder, toListMyMarketsResponseEncoder, toMarketsByIdEncoder, toStakeRequestEncoder, toStakeResponseEncoder, toResolveRequestEncoder, toResolveResponseEncoder, toSetTrustedRequestEncoder, toSetTrustedResponseEncoder, toGetUserRequestEncoder, toGetUserResponseEncoder, toChangePasswordRequestEncoder, toChangePasswordResponseEncoder
    )

{-| ProtoBuf module: `Biatob.Proto.Mvp`

This module was generated automatically using

  - [`protoc-gen-elm`](https://www.npmjs.com/package/protoc-gen-elm) 1.0.0-beta-2
  - `protoc` unknown version
  - the following specification file: `protobuf/mvp.proto`

To run it use [`elm-protocol-buffers`](https://package.elm-lang.org/packages/eriktim/elm-protocol-buffers/1.1.0) version 1.1.0 or higher.


# Model

@docs Void, Resolution, Kind, UserId, AuthToken, WorldState, WorldStateGenericUserInfo, WorldStateUsernameInfo, WorldStateMarket, ResolutionEvent, Trade, WhoamiRequest, WhoamiResponse, SignOutRequest, SignOutResponse, RegisterUsernameRequest, RegisterUsernameResult, RegisterUsernameResponse, RegisterUsernameResponseError, LogInUsernameRequest, LogInUsernameResult, LogInUsernameResponse, LogInUsernameResponseError, CertaintyRange, PrivacyKind, MarketPrivacy, MarketPrivacyEmails, CreateMarketRequest, CreateMarketResult, CreateMarketResponse, CreateMarketResponseError, GetMarketRequest, GetMarketResult, GetMarketResponse, GetMarketResponseError, UserMarketView, UserUserView, ListMyMarketsRequest, ListMyMarketsResult, ListMyMarketsResponse, ListMyMarketsResponseError, MarketsById, StakeRequest, StakeResult, StakeResponse, StakeResponseError, ResolveRequest, ResolveResult, ResolveResponse, ResolveResponseError, SetTrustedRequest, SetTrustedResult, SetTrustedResponse, SetTrustedResponseError, GetUserRequest, GetUserResult, GetUserResponse, GetUserResponseError, ChangePasswordRequest, ChangePasswordResult, ChangePasswordResponse, ChangePasswordResponseError


# Decoder

@docs userIdDecoder, authTokenDecoder, worldStateDecoder, resolutionEventDecoder, tradeDecoder, whoamiRequestDecoder, whoamiResponseDecoder, signOutRequestDecoder, signOutResponseDecoder, registerUsernameRequestDecoder, registerUsernameResponseDecoder, logInUsernameRequestDecoder, logInUsernameResponseDecoder, certaintyRangeDecoder, marketPrivacyDecoder, createMarketRequestDecoder, createMarketResponseDecoder, getMarketRequestDecoder, getMarketResponseDecoder, userMarketViewDecoder, userUserViewDecoder, listMyMarketsRequestDecoder, listMyMarketsResponseDecoder, marketsByIdDecoder, stakeRequestDecoder, stakeResponseDecoder, resolveRequestDecoder, resolveResponseDecoder, setTrustedRequestDecoder, setTrustedResponseDecoder, getUserRequestDecoder, getUserResponseDecoder, changePasswordRequestDecoder, changePasswordResponseDecoder


# Encoder

@docs toUserIdEncoder, toAuthTokenEncoder, toWorldStateEncoder, toResolutionEventEncoder, toTradeEncoder, toWhoamiRequestEncoder, toWhoamiResponseEncoder, toSignOutRequestEncoder, toSignOutResponseEncoder, toRegisterUsernameRequestEncoder, toRegisterUsernameResponseEncoder, toLogInUsernameRequestEncoder, toLogInUsernameResponseEncoder, toCertaintyRangeEncoder, toMarketPrivacyEncoder, toCreateMarketRequestEncoder, toCreateMarketResponseEncoder, toGetMarketRequestEncoder, toGetMarketResponseEncoder, toUserMarketViewEncoder, toUserUserViewEncoder, toListMyMarketsRequestEncoder, toListMyMarketsResponseEncoder, toMarketsByIdEncoder, toStakeRequestEncoder, toStakeResponseEncoder, toResolveRequestEncoder, toResolveResponseEncoder, toSetTrustedRequestEncoder, toSetTrustedResponseEncoder, toGetUserRequestEncoder, toGetUserResponseEncoder, toChangePasswordRequestEncoder, toChangePasswordResponseEncoder

-}

import Bytes
import Dict
import Protobuf.Decode as Decode
import Protobuf.Encode as Encode



-- MODEL


{-| `Void` enumeration
-}
type Void
    = Void
    | VoidUnrecognized_ Int


{-| `Resolution` enumeration
-}
type Resolution
    = ResolutionNoneYet
    | ResolutionYes
    | ResolutionNo
    | ResolutionInvalid
    | ResolutionUnrecognized_ Int


{-| Kind
-}
type Kind
    = KindUsername String


{-| `UserId` message
-}
type alias UserId =
    { kind : Maybe Kind
    }


{-| `AuthToken` message
-}
type alias AuthToken =
    { hmacOfRest : Bytes.Bytes
    , owner : Maybe UserId
    , mintedUnixtime : Int
    , expiresUnixtime : Int
    }


{-| `WorldState` message
-}
type alias WorldState =
    { usernameUsers : Dict.Dict String (Maybe WorldStateUsernameInfo)
    , markets : Dict.Dict Int (Maybe WorldStateMarket)
    }


{-| `WorldStateGenericUserInfo` message
-}
type alias WorldStateGenericUserInfo =
    { trustedUsers : List UserId
    }


{-| `WorldStateUsernameInfo` message
-}
type alias WorldStateUsernameInfo =
    { info : Maybe WorldStateGenericUserInfo
    , passwordBcrypt : Bytes.Bytes
    }


{-| `WorldStateMarket` message
-}
type alias WorldStateMarket =
    { question : String
    , certainty : Maybe CertaintyRange
    , maximumStakeCents : Int
    , createdUnixtime : Int
    , closesUnixtime : Int
    , specialRules : String
    , creator : Maybe UserId
    , trades : List Trade
    , resolutions : List ResolutionEvent
    }


{-| `ResolutionEvent` message
-}
type alias ResolutionEvent =
    { unixtime : Int
    , resolution : Resolution
    , notes : String
    }


{-| `Trade` message
-}
type alias Trade =
    { bettor : Maybe UserId
    , bettorIsASkeptic : Bool
    , bettorStakeCents : Int
    , creatorStakeCents : Int
    , transactedUnixtime : Int
    }


{-| `WhoamiRequest` message
-}
type alias WhoamiRequest =
    {}


{-| `WhoamiResponse` message
-}
type alias WhoamiResponse =
    { auth : Maybe AuthToken
    }


{-| `SignOutRequest` message
-}
type alias SignOutRequest =
    {}


{-| `SignOutResponse` message
-}
type alias SignOutResponse =
    {}


{-| `RegisterUsernameRequest` message
-}
type alias RegisterUsernameRequest =
    { username : String
    , password : String
    }


{-| RegisterUsernameResult
-}
type RegisterUsernameResult
    = RegisterUsernameResultOk AuthToken
    | RegisterUsernameResultError RegisterUsernameResponseError


{-| `RegisterUsernameResponse` message
-}
type alias RegisterUsernameResponse =
    { registerUsernameResult : Maybe RegisterUsernameResult
    }


{-| `RegisterUsernameResponseError` message
-}
type alias RegisterUsernameResponseError =
    { catchall : String
    , usernameTaken : Void
    }


{-| `LogInUsernameRequest` message
-}
type alias LogInUsernameRequest =
    { username : String
    , password : String
    }


{-| LogInUsernameResult
-}
type LogInUsernameResult
    = LogInUsernameResultOk AuthToken
    | LogInUsernameResultError LogInUsernameResponseError


{-| `LogInUsernameResponse` message
-}
type alias LogInUsernameResponse =
    { logInUsernameResult : Maybe LogInUsernameResult
    }


{-| `LogInUsernameResponseError` message
-}
type alias LogInUsernameResponseError =
    { catchall : String
    }


{-| `CertaintyRange` message
-}
type alias CertaintyRange =
    { low : Float
    , high : Float
    }


{-| PrivacyKind
-}
type PrivacyKind
    = PrivacyKindAllTrustedByAuthor Void
    | PrivacyKindSpecificUsers MarketPrivacyEmails


{-| `MarketPrivacy` message
-}
type alias MarketPrivacy =
    { privacyKind : Maybe PrivacyKind
    }


{-| `MarketPrivacyEmails` message
-}
type alias MarketPrivacyEmails =
    { emails : List String
    }


{-| `CreateMarketRequest` message
-}
type alias CreateMarketRequest =
    { question : String
    , privacy : Maybe MarketPrivacy
    , certainty : Maybe CertaintyRange
    , maximumStakeCents : Int
    , openSeconds : Int
    , specialRules : String
    }


{-| CreateMarketResult
-}
type CreateMarketResult
    = CreateMarketResultNewMarketId Int
    | CreateMarketResultError CreateMarketResponseError


{-| `CreateMarketResponse` message
-}
type alias CreateMarketResponse =
    { createMarketResult : Maybe CreateMarketResult
    }


{-| `CreateMarketResponseError` message
-}
type alias CreateMarketResponseError =
    { catchall : String
    }


{-| `GetMarketRequest` message
-}
type alias GetMarketRequest =
    { marketId : Int
    }


{-| GetMarketResult
-}
type GetMarketResult
    = GetMarketResultMarket UserMarketView
    | GetMarketResultError GetMarketResponseError


{-| `GetMarketResponse` message
-}
type alias GetMarketResponse =
    { getMarketResult : Maybe GetMarketResult
    }


{-| `GetMarketResponseError` message
-}
type alias GetMarketResponseError =
    { catchall : String
    , noSuchMarket : Void
    }


{-| `UserMarketView` message
-}
type alias UserMarketView =
    { question : String
    , certainty : Maybe CertaintyRange
    , maximumStakeCents : Int
    , remainingStakeCentsVsBelievers : Int
    , remainingStakeCentsVsSkeptics : Int
    , createdUnixtime : Int
    , closesUnixtime : Int
    , specialRules : String
    , creator : Maybe UserUserView
    , resolutions : List ResolutionEvent
    , yourTrades : List Trade
    }


{-| `UserUserView` message
-}
type alias UserUserView =
    { displayName : String
    , isSelf : Bool
    , isTrusted : Bool
    , trustsYou : Bool
    }


{-| `ListMyMarketsRequest` message
-}
type alias ListMyMarketsRequest =
    {}


{-| ListMyMarketsResult
-}
type ListMyMarketsResult
    = ListMyMarketsResultOk MarketsById
    | ListMyMarketsResultError ListMyMarketsResponseError


{-| `ListMyMarketsResponse` message
-}
type alias ListMyMarketsResponse =
    { listMyMarketsResult : Maybe ListMyMarketsResult
    }


{-| `ListMyMarketsResponseError` message
-}
type alias ListMyMarketsResponseError =
    { catchall : String
    , noSuchMarket : Void
    }


{-| `MarketsById` message
-}
type alias MarketsById =
    { markets : Dict.Dict Int (Maybe UserMarketView)
    }


{-| `StakeRequest` message
-}
type alias StakeRequest =
    { marketId : Int
    , bettorIsASkeptic : Bool
    , bettorStakeCents : Int
    }


{-| StakeResult
-}
type StakeResult
    = StakeResultOk Void
    | StakeResultError StakeResponseError


{-| `StakeResponse` message
-}
type alias StakeResponse =
    { stakeResult : Maybe StakeResult
    }


{-| `StakeResponseError` message
-}
type alias StakeResponseError =
    { catchall : String
    }


{-| `ResolveRequest` message
-}
type alias ResolveRequest =
    { marketId : Int
    , resolution : Resolution
    , notes : String
    }


{-| ResolveResult
-}
type ResolveResult
    = ResolveResultOk Void
    | ResolveResultError ResolveResponseError


{-| `ResolveResponse` message
-}
type alias ResolveResponse =
    { resolveResult : Maybe ResolveResult
    }


{-| `ResolveResponseError` message
-}
type alias ResolveResponseError =
    { catchall : String
    }


{-| `SetTrustedRequest` message
-}
type alias SetTrustedRequest =
    { who : Maybe UserId
    , trusted : Bool
    }


{-| SetTrustedResult
-}
type SetTrustedResult
    = SetTrustedResultOk Void
    | SetTrustedResultError SetTrustedResponseError


{-| `SetTrustedResponse` message
-}
type alias SetTrustedResponse =
    { setTrustedResult : Maybe SetTrustedResult
    }


{-| `SetTrustedResponseError` message
-}
type alias SetTrustedResponseError =
    { catchall : String
    }


{-| `GetUserRequest` message
-}
type alias GetUserRequest =
    { who : Maybe UserId
    }


{-| GetUserResult
-}
type GetUserResult
    = GetUserResultOk UserUserView
    | GetUserResultError GetUserResponseError


{-| `GetUserResponse` message
-}
type alias GetUserResponse =
    { getUserResult : Maybe GetUserResult
    }


{-| `GetUserResponseError` message
-}
type alias GetUserResponseError =
    { catchall : String
    }


{-| `ChangePasswordRequest` message
-}
type alias ChangePasswordRequest =
    { oldPassword : String
    , newPassword : String
    }


{-| ChangePasswordResult
-}
type ChangePasswordResult
    = ChangePasswordResultOk Void
    | ChangePasswordResultError ChangePasswordResponseError


{-| `ChangePasswordResponse` message
-}
type alias ChangePasswordResponse =
    { changePasswordResult : Maybe ChangePasswordResult
    }


{-| `ChangePasswordResponseError` message
-}
type alias ChangePasswordResponseError =
    { catchall : String
    }



-- DECODER


voidDecoder : Decode.Decoder Void
voidDecoder =
    Decode.int32
        |> Decode.map
            (\value ->
                case value of
                    0 ->
                        Void

                    v ->
                        VoidUnrecognized_ v
            )


resolutionDecoder : Decode.Decoder Resolution
resolutionDecoder =
    Decode.int32
        |> Decode.map
            (\value ->
                case value of
                    0 ->
                        ResolutionNoneYet

                    1 ->
                        ResolutionYes

                    2 ->
                        ResolutionNo

                    3 ->
                        ResolutionInvalid

                    v ->
                        ResolutionUnrecognized_ v
            )


{-| `UserId` decoder
-}
userIdDecoder : Decode.Decoder UserId
userIdDecoder =
    Decode.message (UserId Nothing)
        [ Decode.oneOf
            [ ( 1, Decode.map KindUsername Decode.string )
            ]
            setKind
        ]


{-| `AuthToken` decoder
-}
authTokenDecoder : Decode.Decoder AuthToken
authTokenDecoder =
    Decode.message (AuthToken (Encode.encode <| Encode.string "") Nothing 0 0)
        [ Decode.optional 1 Decode.bytes setHmacOfRest
        , Decode.optional 2 (Decode.map Just userIdDecoder) setOwner
        , Decode.optional 3 Decode.uint32 setMintedUnixtime
        , Decode.optional 4 Decode.uint32 setExpiresUnixtime
        ]


{-| `WorldState` decoder
-}
worldStateDecoder : Decode.Decoder WorldState
worldStateDecoder =
    Decode.message (WorldState Dict.empty Dict.empty)
        [ Decode.mapped 1 ( "", Nothing ) Decode.string (Decode.map Just worldStateUsernameInfoDecoder) .usernameUsers setUsernameUsers
        , Decode.mapped 2 ( 0, Nothing ) Decode.uint32 (Decode.map Just worldStateMarketDecoder) .markets setMarkets
        ]


worldStateGenericUserInfoDecoder : Decode.Decoder WorldStateGenericUserInfo
worldStateGenericUserInfoDecoder =
    Decode.message (WorldStateGenericUserInfo [])
        [ Decode.repeated 1 userIdDecoder .trustedUsers setTrustedUsers
        ]


worldStateUsernameInfoDecoder : Decode.Decoder WorldStateUsernameInfo
worldStateUsernameInfoDecoder =
    Decode.message (WorldStateUsernameInfo Nothing (Encode.encode <| Encode.string ""))
        [ Decode.optional 1 (Decode.map Just worldStateGenericUserInfoDecoder) setInfo
        , Decode.optional 2 Decode.bytes setPasswordBcrypt
        ]


worldStateMarketDecoder : Decode.Decoder WorldStateMarket
worldStateMarketDecoder =
    Decode.message (WorldStateMarket "" Nothing 0 0 0 "" Nothing [] [])
        [ Decode.optional 1 Decode.string setQuestion
        , Decode.optional 2 (Decode.map Just certaintyRangeDecoder) setCertainty
        , Decode.optional 3 Decode.uint32 setMaximumStakeCents
        , Decode.optional 4 Decode.uint32 setCreatedUnixtime
        , Decode.optional 5 Decode.uint32 setClosesUnixtime
        , Decode.optional 6 Decode.string setSpecialRules
        , Decode.optional 7 (Decode.map Just userIdDecoder) setCreator
        , Decode.repeated 8 tradeDecoder .trades setTrades
        , Decode.repeated 10 resolutionEventDecoder .resolutions setResolutions
        ]


{-| `ResolutionEvent` decoder
-}
resolutionEventDecoder : Decode.Decoder ResolutionEvent
resolutionEventDecoder =
    Decode.message (ResolutionEvent 0 ResolutionNoneYet "")
        [ Decode.optional 1 Decode.uint32 setUnixtime
        , Decode.optional 2 resolutionDecoder setResolution
        , Decode.optional 3 Decode.string setNotes
        ]


{-| `Trade` decoder
-}
tradeDecoder : Decode.Decoder Trade
tradeDecoder =
    Decode.message (Trade Nothing False 0 0 0)
        [ Decode.optional 1 (Decode.map Just userIdDecoder) setBettor
        , Decode.optional 2 Decode.bool setBettorIsASkeptic
        , Decode.optional 3 Decode.uint32 setBettorStakeCents
        , Decode.optional 4 Decode.uint32 setCreatorStakeCents
        , Decode.optional 5 Decode.uint32 setTransactedUnixtime
        ]


{-| `WhoamiRequest` decoder
-}
whoamiRequestDecoder : Decode.Decoder WhoamiRequest
whoamiRequestDecoder =
    Decode.message WhoamiRequest
        []


{-| `WhoamiResponse` decoder
-}
whoamiResponseDecoder : Decode.Decoder WhoamiResponse
whoamiResponseDecoder =
    Decode.message (WhoamiResponse Nothing)
        [ Decode.optional 1 (Decode.map Just authTokenDecoder) setAuth
        ]


{-| `SignOutRequest` decoder
-}
signOutRequestDecoder : Decode.Decoder SignOutRequest
signOutRequestDecoder =
    Decode.message SignOutRequest
        []


{-| `SignOutResponse` decoder
-}
signOutResponseDecoder : Decode.Decoder SignOutResponse
signOutResponseDecoder =
    Decode.message SignOutResponse
        []


{-| `RegisterUsernameRequest` decoder
-}
registerUsernameRequestDecoder : Decode.Decoder RegisterUsernameRequest
registerUsernameRequestDecoder =
    Decode.message (RegisterUsernameRequest "" "")
        [ Decode.optional 1 Decode.string setUsername
        , Decode.optional 2 Decode.string setPassword
        ]


{-| `RegisterUsernameResponse` decoder
-}
registerUsernameResponseDecoder : Decode.Decoder RegisterUsernameResponse
registerUsernameResponseDecoder =
    Decode.message (RegisterUsernameResponse Nothing)
        [ Decode.oneOf
            [ ( 1, Decode.map RegisterUsernameResultOk authTokenDecoder )
            , ( 2, Decode.map RegisterUsernameResultError registerUsernameResponseErrorDecoder )
            ]
            setRegisterUsernameResult
        ]


registerUsernameResponseErrorDecoder : Decode.Decoder RegisterUsernameResponseError
registerUsernameResponseErrorDecoder =
    Decode.message (RegisterUsernameResponseError "" Void)
        [ Decode.optional 1 Decode.string setCatchall
        , Decode.optional 2 voidDecoder setUsernameTaken
        ]


{-| `LogInUsernameRequest` decoder
-}
logInUsernameRequestDecoder : Decode.Decoder LogInUsernameRequest
logInUsernameRequestDecoder =
    Decode.message (LogInUsernameRequest "" "")
        [ Decode.optional 1 Decode.string setUsername
        , Decode.optional 2 Decode.string setPassword
        ]


{-| `LogInUsernameResponse` decoder
-}
logInUsernameResponseDecoder : Decode.Decoder LogInUsernameResponse
logInUsernameResponseDecoder =
    Decode.message (LogInUsernameResponse Nothing)
        [ Decode.oneOf
            [ ( 1, Decode.map LogInUsernameResultOk authTokenDecoder )
            , ( 2, Decode.map LogInUsernameResultError logInUsernameResponseErrorDecoder )
            ]
            setLogInUsernameResult
        ]


logInUsernameResponseErrorDecoder : Decode.Decoder LogInUsernameResponseError
logInUsernameResponseErrorDecoder =
    Decode.message (LogInUsernameResponseError "")
        [ Decode.optional 1 Decode.string setCatchall
        ]


{-| `CertaintyRange` decoder
-}
certaintyRangeDecoder : Decode.Decoder CertaintyRange
certaintyRangeDecoder =
    Decode.message (CertaintyRange 0 0)
        [ Decode.optional 1 Decode.float setLow
        , Decode.optional 2 Decode.float setHigh
        ]


{-| `MarketPrivacy` decoder
-}
marketPrivacyDecoder : Decode.Decoder MarketPrivacy
marketPrivacyDecoder =
    Decode.message (MarketPrivacy Nothing)
        [ Decode.oneOf
            [ ( 1, Decode.map PrivacyKindAllTrustedByAuthor voidDecoder )
            , ( 2, Decode.map PrivacyKindSpecificUsers marketPrivacyEmailsDecoder )
            ]
            setPrivacyKind
        ]


marketPrivacyEmailsDecoder : Decode.Decoder MarketPrivacyEmails
marketPrivacyEmailsDecoder =
    Decode.message (MarketPrivacyEmails [])
        [ Decode.repeated 1 Decode.string .emails setEmails
        ]


{-| `CreateMarketRequest` decoder
-}
createMarketRequestDecoder : Decode.Decoder CreateMarketRequest
createMarketRequestDecoder =
    Decode.message (CreateMarketRequest "" Nothing Nothing 0 0 "")
        [ Decode.optional 2 Decode.string setQuestion
        , Decode.optional 3 (Decode.map Just marketPrivacyDecoder) setPrivacy
        , Decode.optional 4 (Decode.map Just certaintyRangeDecoder) setCertainty
        , Decode.optional 5 Decode.uint32 setMaximumStakeCents
        , Decode.optional 6 Decode.uint32 setOpenSeconds
        , Decode.optional 7 Decode.string setSpecialRules
        ]


{-| `CreateMarketResponse` decoder
-}
createMarketResponseDecoder : Decode.Decoder CreateMarketResponse
createMarketResponseDecoder =
    Decode.message (CreateMarketResponse Nothing)
        [ Decode.oneOf
            [ ( 1, Decode.map CreateMarketResultNewMarketId Decode.uint32 )
            , ( 2, Decode.map CreateMarketResultError createMarketResponseErrorDecoder )
            ]
            setCreateMarketResult
        ]


createMarketResponseErrorDecoder : Decode.Decoder CreateMarketResponseError
createMarketResponseErrorDecoder =
    Decode.message (CreateMarketResponseError "")
        [ Decode.optional 1 Decode.string setCatchall
        ]


{-| `GetMarketRequest` decoder
-}
getMarketRequestDecoder : Decode.Decoder GetMarketRequest
getMarketRequestDecoder =
    Decode.message (GetMarketRequest 0)
        [ Decode.optional 2 Decode.uint32 setMarketId
        ]


{-| `GetMarketResponse` decoder
-}
getMarketResponseDecoder : Decode.Decoder GetMarketResponse
getMarketResponseDecoder =
    Decode.message (GetMarketResponse Nothing)
        [ Decode.oneOf
            [ ( 1, Decode.map GetMarketResultMarket userMarketViewDecoder )
            , ( 2, Decode.map GetMarketResultError getMarketResponseErrorDecoder )
            ]
            setGetMarketResult
        ]


getMarketResponseErrorDecoder : Decode.Decoder GetMarketResponseError
getMarketResponseErrorDecoder =
    Decode.message (GetMarketResponseError "" Void)
        [ Decode.optional 1 Decode.string setCatchall
        , Decode.optional 2 voidDecoder setNoSuchMarket
        ]


{-| `UserMarketView` decoder
-}
userMarketViewDecoder : Decode.Decoder UserMarketView
userMarketViewDecoder =
    Decode.message (UserMarketView "" Nothing 0 0 0 0 0 "" Nothing [] [])
        [ Decode.optional 1 Decode.string setQuestion
        , Decode.optional 2 (Decode.map Just certaintyRangeDecoder) setCertainty
        , Decode.optional 3 Decode.uint32 setMaximumStakeCents
        , Decode.optional 4 Decode.uint32 setRemainingStakeCentsVsBelievers
        , Decode.optional 5 Decode.uint32 setRemainingStakeCentsVsSkeptics
        , Decode.optional 6 Decode.uint32 setCreatedUnixtime
        , Decode.optional 7 Decode.uint32 setClosesUnixtime
        , Decode.optional 8 Decode.string setSpecialRules
        , Decode.optional 9 (Decode.map Just userUserViewDecoder) setCreator
        , Decode.repeated 10 resolutionEventDecoder .resolutions setResolutions
        , Decode.repeated 11 tradeDecoder .yourTrades setYourTrades
        ]


{-| `UserUserView` decoder
-}
userUserViewDecoder : Decode.Decoder UserUserView
userUserViewDecoder =
    Decode.message (UserUserView "" False False False)
        [ Decode.optional 1 Decode.string setDisplayName
        , Decode.optional 2 Decode.bool setIsSelf
        , Decode.optional 3 Decode.bool setIsTrusted
        , Decode.optional 4 Decode.bool setTrustsYou
        ]


{-| `ListMyMarketsRequest` decoder
-}
listMyMarketsRequestDecoder : Decode.Decoder ListMyMarketsRequest
listMyMarketsRequestDecoder =
    Decode.message ListMyMarketsRequest
        []


{-| `ListMyMarketsResponse` decoder
-}
listMyMarketsResponseDecoder : Decode.Decoder ListMyMarketsResponse
listMyMarketsResponseDecoder =
    Decode.message (ListMyMarketsResponse Nothing)
        [ Decode.oneOf
            [ ( 1, Decode.map ListMyMarketsResultOk marketsByIdDecoder )
            , ( 2, Decode.map ListMyMarketsResultError listMyMarketsResponseErrorDecoder )
            ]
            setListMyMarketsResult
        ]


listMyMarketsResponseErrorDecoder : Decode.Decoder ListMyMarketsResponseError
listMyMarketsResponseErrorDecoder =
    Decode.message (ListMyMarketsResponseError "" Void)
        [ Decode.optional 1 Decode.string setCatchall
        , Decode.optional 2 voidDecoder setNoSuchMarket
        ]


{-| `MarketsById` decoder
-}
marketsByIdDecoder : Decode.Decoder MarketsById
marketsByIdDecoder =
    Decode.message (MarketsById Dict.empty)
        [ Decode.mapped 1 ( 0, Nothing ) Decode.uint32 (Decode.map Just userMarketViewDecoder) .markets setMarkets
        ]


{-| `StakeRequest` decoder
-}
stakeRequestDecoder : Decode.Decoder StakeRequest
stakeRequestDecoder =
    Decode.message (StakeRequest 0 False 0)
        [ Decode.optional 2 Decode.uint32 setMarketId
        , Decode.optional 3 Decode.bool setBettorIsASkeptic
        , Decode.optional 4 Decode.uint32 setBettorStakeCents
        ]


{-| `StakeResponse` decoder
-}
stakeResponseDecoder : Decode.Decoder StakeResponse
stakeResponseDecoder =
    Decode.message (StakeResponse Nothing)
        [ Decode.oneOf
            [ ( 1, Decode.map StakeResultOk voidDecoder )
            , ( 2, Decode.map StakeResultError stakeResponseErrorDecoder )
            ]
            setStakeResult
        ]


stakeResponseErrorDecoder : Decode.Decoder StakeResponseError
stakeResponseErrorDecoder =
    Decode.message (StakeResponseError "")
        [ Decode.optional 1 Decode.string setCatchall
        ]


{-| `ResolveRequest` decoder
-}
resolveRequestDecoder : Decode.Decoder ResolveRequest
resolveRequestDecoder =
    Decode.message (ResolveRequest 0 ResolutionNoneYet "")
        [ Decode.optional 1 Decode.uint32 setMarketId
        , Decode.optional 2 resolutionDecoder setResolution
        , Decode.optional 3 Decode.string setNotes
        ]


{-| `ResolveResponse` decoder
-}
resolveResponseDecoder : Decode.Decoder ResolveResponse
resolveResponseDecoder =
    Decode.message (ResolveResponse Nothing)
        [ Decode.oneOf
            [ ( 1, Decode.map ResolveResultOk voidDecoder )
            , ( 2, Decode.map ResolveResultError resolveResponseErrorDecoder )
            ]
            setResolveResult
        ]


resolveResponseErrorDecoder : Decode.Decoder ResolveResponseError
resolveResponseErrorDecoder =
    Decode.message (ResolveResponseError "")
        [ Decode.optional 1 Decode.string setCatchall
        ]


{-| `SetTrustedRequest` decoder
-}
setTrustedRequestDecoder : Decode.Decoder SetTrustedRequest
setTrustedRequestDecoder =
    Decode.message (SetTrustedRequest Nothing False)
        [ Decode.optional 1 (Decode.map Just userIdDecoder) setWho
        , Decode.optional 2 Decode.bool setTrusted
        ]


{-| `SetTrustedResponse` decoder
-}
setTrustedResponseDecoder : Decode.Decoder SetTrustedResponse
setTrustedResponseDecoder =
    Decode.message (SetTrustedResponse Nothing)
        [ Decode.oneOf
            [ ( 1, Decode.map SetTrustedResultOk voidDecoder )
            , ( 2, Decode.map SetTrustedResultError setTrustedResponseErrorDecoder )
            ]
            setSetTrustedResult
        ]


setTrustedResponseErrorDecoder : Decode.Decoder SetTrustedResponseError
setTrustedResponseErrorDecoder =
    Decode.message (SetTrustedResponseError "")
        [ Decode.optional 1 Decode.string setCatchall
        ]


{-| `GetUserRequest` decoder
-}
getUserRequestDecoder : Decode.Decoder GetUserRequest
getUserRequestDecoder =
    Decode.message (GetUserRequest Nothing)
        [ Decode.optional 1 (Decode.map Just userIdDecoder) setWho
        ]


{-| `GetUserResponse` decoder
-}
getUserResponseDecoder : Decode.Decoder GetUserResponse
getUserResponseDecoder =
    Decode.message (GetUserResponse Nothing)
        [ Decode.oneOf
            [ ( 1, Decode.map GetUserResultOk userUserViewDecoder )
            , ( 2, Decode.map GetUserResultError getUserResponseErrorDecoder )
            ]
            setGetUserResult
        ]


getUserResponseErrorDecoder : Decode.Decoder GetUserResponseError
getUserResponseErrorDecoder =
    Decode.message (GetUserResponseError "")
        [ Decode.optional 1 Decode.string setCatchall
        ]


{-| `ChangePasswordRequest` decoder
-}
changePasswordRequestDecoder : Decode.Decoder ChangePasswordRequest
changePasswordRequestDecoder =
    Decode.message (ChangePasswordRequest "" "")
        [ Decode.optional 1 Decode.string setOldPassword
        , Decode.optional 2 Decode.string setNewPassword
        ]


{-| `ChangePasswordResponse` decoder
-}
changePasswordResponseDecoder : Decode.Decoder ChangePasswordResponse
changePasswordResponseDecoder =
    Decode.message (ChangePasswordResponse Nothing)
        [ Decode.oneOf
            [ ( 1, Decode.map ChangePasswordResultOk voidDecoder )
            , ( 2, Decode.map ChangePasswordResultError changePasswordResponseErrorDecoder )
            ]
            setChangePasswordResult
        ]


changePasswordResponseErrorDecoder : Decode.Decoder ChangePasswordResponseError
changePasswordResponseErrorDecoder =
    Decode.message (ChangePasswordResponseError "")
        [ Decode.optional 1 Decode.string setCatchall
        ]



-- ENCODER


toVoidEncoder : Void -> Encode.Encoder
toVoidEncoder value =
    Encode.int32 <|
        case value of
            Void ->
                0

            VoidUnrecognized_ v ->
                v


toResolutionEncoder : Resolution -> Encode.Encoder
toResolutionEncoder value =
    Encode.int32 <|
        case value of
            ResolutionNoneYet ->
                0

            ResolutionYes ->
                1

            ResolutionNo ->
                2

            ResolutionInvalid ->
                3

            ResolutionUnrecognized_ v ->
                v


toKindEncoder : Kind -> ( Int, Encode.Encoder )
toKindEncoder model =
    case model of
        KindUsername value ->
            ( 1, Encode.string value )


{-| `UserId` encoder
-}
toUserIdEncoder : UserId -> Encode.Encoder
toUserIdEncoder model =
    Encode.message
        [ Maybe.withDefault ( 0, Encode.none ) <| Maybe.map toKindEncoder model.kind
        ]


{-| `AuthToken` encoder
-}
toAuthTokenEncoder : AuthToken -> Encode.Encoder
toAuthTokenEncoder model =
    Encode.message
        [ ( 1, Encode.bytes model.hmacOfRest )
        , ( 2, (Maybe.withDefault Encode.none << Maybe.map toUserIdEncoder) model.owner )
        , ( 3, Encode.uint32 model.mintedUnixtime )
        , ( 4, Encode.uint32 model.expiresUnixtime )
        ]


{-| `WorldState` encoder
-}
toWorldStateEncoder : WorldState -> Encode.Encoder
toWorldStateEncoder model =
    Encode.message
        [ ( 1, Encode.dict Encode.string (Maybe.withDefault Encode.none << Maybe.map toWorldStateUsernameInfoEncoder) model.usernameUsers )
        , ( 2, Encode.dict Encode.uint32 (Maybe.withDefault Encode.none << Maybe.map toWorldStateMarketEncoder) model.markets )
        ]


toWorldStateGenericUserInfoEncoder : WorldStateGenericUserInfo -> Encode.Encoder
toWorldStateGenericUserInfoEncoder model =
    Encode.message
        [ ( 1, Encode.list toUserIdEncoder model.trustedUsers )
        ]


toWorldStateUsernameInfoEncoder : WorldStateUsernameInfo -> Encode.Encoder
toWorldStateUsernameInfoEncoder model =
    Encode.message
        [ ( 1, (Maybe.withDefault Encode.none << Maybe.map toWorldStateGenericUserInfoEncoder) model.info )
        , ( 2, Encode.bytes model.passwordBcrypt )
        ]


toWorldStateMarketEncoder : WorldStateMarket -> Encode.Encoder
toWorldStateMarketEncoder model =
    Encode.message
        [ ( 1, Encode.string model.question )
        , ( 2, (Maybe.withDefault Encode.none << Maybe.map toCertaintyRangeEncoder) model.certainty )
        , ( 3, Encode.uint32 model.maximumStakeCents )
        , ( 4, Encode.uint32 model.createdUnixtime )
        , ( 5, Encode.uint32 model.closesUnixtime )
        , ( 6, Encode.string model.specialRules )
        , ( 7, (Maybe.withDefault Encode.none << Maybe.map toUserIdEncoder) model.creator )
        , ( 8, Encode.list toTradeEncoder model.trades )
        , ( 10, Encode.list toResolutionEventEncoder model.resolutions )
        ]


{-| `ResolutionEvent` encoder
-}
toResolutionEventEncoder : ResolutionEvent -> Encode.Encoder
toResolutionEventEncoder model =
    Encode.message
        [ ( 1, Encode.uint32 model.unixtime )
        , ( 2, toResolutionEncoder model.resolution )
        , ( 3, Encode.string model.notes )
        ]


{-| `Trade` encoder
-}
toTradeEncoder : Trade -> Encode.Encoder
toTradeEncoder model =
    Encode.message
        [ ( 1, (Maybe.withDefault Encode.none << Maybe.map toUserIdEncoder) model.bettor )
        , ( 2, Encode.bool model.bettorIsASkeptic )
        , ( 3, Encode.uint32 model.bettorStakeCents )
        , ( 4, Encode.uint32 model.creatorStakeCents )
        , ( 5, Encode.uint32 model.transactedUnixtime )
        ]


{-| `WhoamiRequest` encoder
-}
toWhoamiRequestEncoder : WhoamiRequest -> Encode.Encoder
toWhoamiRequestEncoder model =
    Encode.message
        []


{-| `WhoamiResponse` encoder
-}
toWhoamiResponseEncoder : WhoamiResponse -> Encode.Encoder
toWhoamiResponseEncoder model =
    Encode.message
        [ ( 1, (Maybe.withDefault Encode.none << Maybe.map toAuthTokenEncoder) model.auth )
        ]


{-| `SignOutRequest` encoder
-}
toSignOutRequestEncoder : SignOutRequest -> Encode.Encoder
toSignOutRequestEncoder model =
    Encode.message
        []


{-| `SignOutResponse` encoder
-}
toSignOutResponseEncoder : SignOutResponse -> Encode.Encoder
toSignOutResponseEncoder model =
    Encode.message
        []


{-| `RegisterUsernameRequest` encoder
-}
toRegisterUsernameRequestEncoder : RegisterUsernameRequest -> Encode.Encoder
toRegisterUsernameRequestEncoder model =
    Encode.message
        [ ( 1, Encode.string model.username )
        , ( 2, Encode.string model.password )
        ]


toRegisterUsernameResultEncoder : RegisterUsernameResult -> ( Int, Encode.Encoder )
toRegisterUsernameResultEncoder model =
    case model of
        RegisterUsernameResultOk value ->
            ( 1, toAuthTokenEncoder value )

        RegisterUsernameResultError value ->
            ( 2, toRegisterUsernameResponseErrorEncoder value )


{-| `RegisterUsernameResponse` encoder
-}
toRegisterUsernameResponseEncoder : RegisterUsernameResponse -> Encode.Encoder
toRegisterUsernameResponseEncoder model =
    Encode.message
        [ Maybe.withDefault ( 0, Encode.none ) <| Maybe.map toRegisterUsernameResultEncoder model.registerUsernameResult
        ]


toRegisterUsernameResponseErrorEncoder : RegisterUsernameResponseError -> Encode.Encoder
toRegisterUsernameResponseErrorEncoder model =
    Encode.message
        [ ( 1, Encode.string model.catchall )
        , ( 2, toVoidEncoder model.usernameTaken )
        ]


{-| `LogInUsernameRequest` encoder
-}
toLogInUsernameRequestEncoder : LogInUsernameRequest -> Encode.Encoder
toLogInUsernameRequestEncoder model =
    Encode.message
        [ ( 1, Encode.string model.username )
        , ( 2, Encode.string model.password )
        ]


toLogInUsernameResultEncoder : LogInUsernameResult -> ( Int, Encode.Encoder )
toLogInUsernameResultEncoder model =
    case model of
        LogInUsernameResultOk value ->
            ( 1, toAuthTokenEncoder value )

        LogInUsernameResultError value ->
            ( 2, toLogInUsernameResponseErrorEncoder value )


{-| `LogInUsernameResponse` encoder
-}
toLogInUsernameResponseEncoder : LogInUsernameResponse -> Encode.Encoder
toLogInUsernameResponseEncoder model =
    Encode.message
        [ Maybe.withDefault ( 0, Encode.none ) <| Maybe.map toLogInUsernameResultEncoder model.logInUsernameResult
        ]


toLogInUsernameResponseErrorEncoder : LogInUsernameResponseError -> Encode.Encoder
toLogInUsernameResponseErrorEncoder model =
    Encode.message
        [ ( 1, Encode.string model.catchall )
        ]


{-| `CertaintyRange` encoder
-}
toCertaintyRangeEncoder : CertaintyRange -> Encode.Encoder
toCertaintyRangeEncoder model =
    Encode.message
        [ ( 1, Encode.float model.low )
        , ( 2, Encode.float model.high )
        ]


toPrivacyKindEncoder : PrivacyKind -> ( Int, Encode.Encoder )
toPrivacyKindEncoder model =
    case model of
        PrivacyKindAllTrustedByAuthor value ->
            ( 1, toVoidEncoder value )

        PrivacyKindSpecificUsers value ->
            ( 2, toMarketPrivacyEmailsEncoder value )


{-| `MarketPrivacy` encoder
-}
toMarketPrivacyEncoder : MarketPrivacy -> Encode.Encoder
toMarketPrivacyEncoder model =
    Encode.message
        [ Maybe.withDefault ( 0, Encode.none ) <| Maybe.map toPrivacyKindEncoder model.privacyKind
        ]


toMarketPrivacyEmailsEncoder : MarketPrivacyEmails -> Encode.Encoder
toMarketPrivacyEmailsEncoder model =
    Encode.message
        [ ( 1, Encode.list Encode.string model.emails )
        ]


{-| `CreateMarketRequest` encoder
-}
toCreateMarketRequestEncoder : CreateMarketRequest -> Encode.Encoder
toCreateMarketRequestEncoder model =
    Encode.message
        [ ( 2, Encode.string model.question )
        , ( 3, (Maybe.withDefault Encode.none << Maybe.map toMarketPrivacyEncoder) model.privacy )
        , ( 4, (Maybe.withDefault Encode.none << Maybe.map toCertaintyRangeEncoder) model.certainty )
        , ( 5, Encode.uint32 model.maximumStakeCents )
        , ( 6, Encode.uint32 model.openSeconds )
        , ( 7, Encode.string model.specialRules )
        ]


toCreateMarketResultEncoder : CreateMarketResult -> ( Int, Encode.Encoder )
toCreateMarketResultEncoder model =
    case model of
        CreateMarketResultNewMarketId value ->
            ( 1, Encode.uint32 value )

        CreateMarketResultError value ->
            ( 2, toCreateMarketResponseErrorEncoder value )


{-| `CreateMarketResponse` encoder
-}
toCreateMarketResponseEncoder : CreateMarketResponse -> Encode.Encoder
toCreateMarketResponseEncoder model =
    Encode.message
        [ Maybe.withDefault ( 0, Encode.none ) <| Maybe.map toCreateMarketResultEncoder model.createMarketResult
        ]


toCreateMarketResponseErrorEncoder : CreateMarketResponseError -> Encode.Encoder
toCreateMarketResponseErrorEncoder model =
    Encode.message
        [ ( 1, Encode.string model.catchall )
        ]


{-| `GetMarketRequest` encoder
-}
toGetMarketRequestEncoder : GetMarketRequest -> Encode.Encoder
toGetMarketRequestEncoder model =
    Encode.message
        [ ( 2, Encode.uint32 model.marketId )
        ]


toGetMarketResultEncoder : GetMarketResult -> ( Int, Encode.Encoder )
toGetMarketResultEncoder model =
    case model of
        GetMarketResultMarket value ->
            ( 1, toUserMarketViewEncoder value )

        GetMarketResultError value ->
            ( 2, toGetMarketResponseErrorEncoder value )


{-| `GetMarketResponse` encoder
-}
toGetMarketResponseEncoder : GetMarketResponse -> Encode.Encoder
toGetMarketResponseEncoder model =
    Encode.message
        [ Maybe.withDefault ( 0, Encode.none ) <| Maybe.map toGetMarketResultEncoder model.getMarketResult
        ]


toGetMarketResponseErrorEncoder : GetMarketResponseError -> Encode.Encoder
toGetMarketResponseErrorEncoder model =
    Encode.message
        [ ( 1, Encode.string model.catchall )
        , ( 2, toVoidEncoder model.noSuchMarket )
        ]


{-| `UserMarketView` encoder
-}
toUserMarketViewEncoder : UserMarketView -> Encode.Encoder
toUserMarketViewEncoder model =
    Encode.message
        [ ( 1, Encode.string model.question )
        , ( 2, (Maybe.withDefault Encode.none << Maybe.map toCertaintyRangeEncoder) model.certainty )
        , ( 3, Encode.uint32 model.maximumStakeCents )
        , ( 4, Encode.uint32 model.remainingStakeCentsVsBelievers )
        , ( 5, Encode.uint32 model.remainingStakeCentsVsSkeptics )
        , ( 6, Encode.uint32 model.createdUnixtime )
        , ( 7, Encode.uint32 model.closesUnixtime )
        , ( 8, Encode.string model.specialRules )
        , ( 9, (Maybe.withDefault Encode.none << Maybe.map toUserUserViewEncoder) model.creator )
        , ( 10, Encode.list toResolutionEventEncoder model.resolutions )
        , ( 11, Encode.list toTradeEncoder model.yourTrades )
        ]


{-| `UserUserView` encoder
-}
toUserUserViewEncoder : UserUserView -> Encode.Encoder
toUserUserViewEncoder model =
    Encode.message
        [ ( 1, Encode.string model.displayName )
        , ( 2, Encode.bool model.isSelf )
        , ( 3, Encode.bool model.isTrusted )
        , ( 4, Encode.bool model.trustsYou )
        ]


{-| `ListMyMarketsRequest` encoder
-}
toListMyMarketsRequestEncoder : ListMyMarketsRequest -> Encode.Encoder
toListMyMarketsRequestEncoder model =
    Encode.message
        []


toListMyMarketsResultEncoder : ListMyMarketsResult -> ( Int, Encode.Encoder )
toListMyMarketsResultEncoder model =
    case model of
        ListMyMarketsResultOk value ->
            ( 1, toMarketsByIdEncoder value )

        ListMyMarketsResultError value ->
            ( 2, toListMyMarketsResponseErrorEncoder value )


{-| `ListMyMarketsResponse` encoder
-}
toListMyMarketsResponseEncoder : ListMyMarketsResponse -> Encode.Encoder
toListMyMarketsResponseEncoder model =
    Encode.message
        [ Maybe.withDefault ( 0, Encode.none ) <| Maybe.map toListMyMarketsResultEncoder model.listMyMarketsResult
        ]


toListMyMarketsResponseErrorEncoder : ListMyMarketsResponseError -> Encode.Encoder
toListMyMarketsResponseErrorEncoder model =
    Encode.message
        [ ( 1, Encode.string model.catchall )
        , ( 2, toVoidEncoder model.noSuchMarket )
        ]


{-| `MarketsById` encoder
-}
toMarketsByIdEncoder : MarketsById -> Encode.Encoder
toMarketsByIdEncoder model =
    Encode.message
        [ ( 1, Encode.dict Encode.uint32 (Maybe.withDefault Encode.none << Maybe.map toUserMarketViewEncoder) model.markets )
        ]


{-| `StakeRequest` encoder
-}
toStakeRequestEncoder : StakeRequest -> Encode.Encoder
toStakeRequestEncoder model =
    Encode.message
        [ ( 2, Encode.uint32 model.marketId )
        , ( 3, Encode.bool model.bettorIsASkeptic )
        , ( 4, Encode.uint32 model.bettorStakeCents )
        ]


toStakeResultEncoder : StakeResult -> ( Int, Encode.Encoder )
toStakeResultEncoder model =
    case model of
        StakeResultOk value ->
            ( 1, toVoidEncoder value )

        StakeResultError value ->
            ( 2, toStakeResponseErrorEncoder value )


{-| `StakeResponse` encoder
-}
toStakeResponseEncoder : StakeResponse -> Encode.Encoder
toStakeResponseEncoder model =
    Encode.message
        [ Maybe.withDefault ( 0, Encode.none ) <| Maybe.map toStakeResultEncoder model.stakeResult
        ]


toStakeResponseErrorEncoder : StakeResponseError -> Encode.Encoder
toStakeResponseErrorEncoder model =
    Encode.message
        [ ( 1, Encode.string model.catchall )
        ]


{-| `ResolveRequest` encoder
-}
toResolveRequestEncoder : ResolveRequest -> Encode.Encoder
toResolveRequestEncoder model =
    Encode.message
        [ ( 1, Encode.uint32 model.marketId )
        , ( 2, toResolutionEncoder model.resolution )
        , ( 3, Encode.string model.notes )
        ]


toResolveResultEncoder : ResolveResult -> ( Int, Encode.Encoder )
toResolveResultEncoder model =
    case model of
        ResolveResultOk value ->
            ( 1, toVoidEncoder value )

        ResolveResultError value ->
            ( 2, toResolveResponseErrorEncoder value )


{-| `ResolveResponse` encoder
-}
toResolveResponseEncoder : ResolveResponse -> Encode.Encoder
toResolveResponseEncoder model =
    Encode.message
        [ Maybe.withDefault ( 0, Encode.none ) <| Maybe.map toResolveResultEncoder model.resolveResult
        ]


toResolveResponseErrorEncoder : ResolveResponseError -> Encode.Encoder
toResolveResponseErrorEncoder model =
    Encode.message
        [ ( 1, Encode.string model.catchall )
        ]


{-| `SetTrustedRequest` encoder
-}
toSetTrustedRequestEncoder : SetTrustedRequest -> Encode.Encoder
toSetTrustedRequestEncoder model =
    Encode.message
        [ ( 1, (Maybe.withDefault Encode.none << Maybe.map toUserIdEncoder) model.who )
        , ( 2, Encode.bool model.trusted )
        ]


toSetTrustedResultEncoder : SetTrustedResult -> ( Int, Encode.Encoder )
toSetTrustedResultEncoder model =
    case model of
        SetTrustedResultOk value ->
            ( 1, toVoidEncoder value )

        SetTrustedResultError value ->
            ( 2, toSetTrustedResponseErrorEncoder value )


{-| `SetTrustedResponse` encoder
-}
toSetTrustedResponseEncoder : SetTrustedResponse -> Encode.Encoder
toSetTrustedResponseEncoder model =
    Encode.message
        [ Maybe.withDefault ( 0, Encode.none ) <| Maybe.map toSetTrustedResultEncoder model.setTrustedResult
        ]


toSetTrustedResponseErrorEncoder : SetTrustedResponseError -> Encode.Encoder
toSetTrustedResponseErrorEncoder model =
    Encode.message
        [ ( 1, Encode.string model.catchall )
        ]


{-| `GetUserRequest` encoder
-}
toGetUserRequestEncoder : GetUserRequest -> Encode.Encoder
toGetUserRequestEncoder model =
    Encode.message
        [ ( 1, (Maybe.withDefault Encode.none << Maybe.map toUserIdEncoder) model.who )
        ]


toGetUserResultEncoder : GetUserResult -> ( Int, Encode.Encoder )
toGetUserResultEncoder model =
    case model of
        GetUserResultOk value ->
            ( 1, toUserUserViewEncoder value )

        GetUserResultError value ->
            ( 2, toGetUserResponseErrorEncoder value )


{-| `GetUserResponse` encoder
-}
toGetUserResponseEncoder : GetUserResponse -> Encode.Encoder
toGetUserResponseEncoder model =
    Encode.message
        [ Maybe.withDefault ( 0, Encode.none ) <| Maybe.map toGetUserResultEncoder model.getUserResult
        ]


toGetUserResponseErrorEncoder : GetUserResponseError -> Encode.Encoder
toGetUserResponseErrorEncoder model =
    Encode.message
        [ ( 1, Encode.string model.catchall )
        ]


{-| `ChangePasswordRequest` encoder
-}
toChangePasswordRequestEncoder : ChangePasswordRequest -> Encode.Encoder
toChangePasswordRequestEncoder model =
    Encode.message
        [ ( 1, Encode.string model.oldPassword )
        , ( 2, Encode.string model.newPassword )
        ]


toChangePasswordResultEncoder : ChangePasswordResult -> ( Int, Encode.Encoder )
toChangePasswordResultEncoder model =
    case model of
        ChangePasswordResultOk value ->
            ( 1, toVoidEncoder value )

        ChangePasswordResultError value ->
            ( 2, toChangePasswordResponseErrorEncoder value )


{-| `ChangePasswordResponse` encoder
-}
toChangePasswordResponseEncoder : ChangePasswordResponse -> Encode.Encoder
toChangePasswordResponseEncoder model =
    Encode.message
        [ Maybe.withDefault ( 0, Encode.none ) <| Maybe.map toChangePasswordResultEncoder model.changePasswordResult
        ]


toChangePasswordResponseErrorEncoder : ChangePasswordResponseError -> Encode.Encoder
toChangePasswordResponseErrorEncoder model =
    Encode.message
        [ ( 1, Encode.string model.catchall )
        ]



-- SETTERS


setKind : a -> { b | kind : a } -> { b | kind : a }
setKind value model =
    { model | kind = value }


setHmacOfRest : a -> { b | hmacOfRest : a } -> { b | hmacOfRest : a }
setHmacOfRest value model =
    { model | hmacOfRest = value }


setOwner : a -> { b | owner : a } -> { b | owner : a }
setOwner value model =
    { model | owner = value }


setMintedUnixtime : a -> { b | mintedUnixtime : a } -> { b | mintedUnixtime : a }
setMintedUnixtime value model =
    { model | mintedUnixtime = value }


setExpiresUnixtime : a -> { b | expiresUnixtime : a } -> { b | expiresUnixtime : a }
setExpiresUnixtime value model =
    { model | expiresUnixtime = value }


setUsernameUsers : a -> { b | usernameUsers : a } -> { b | usernameUsers : a }
setUsernameUsers value model =
    { model | usernameUsers = value }


setMarkets : a -> { b | markets : a } -> { b | markets : a }
setMarkets value model =
    { model | markets = value }


setTrustedUsers : a -> { b | trustedUsers : a } -> { b | trustedUsers : a }
setTrustedUsers value model =
    { model | trustedUsers = value }


setInfo : a -> { b | info : a } -> { b | info : a }
setInfo value model =
    { model | info = value }


setPasswordBcrypt : a -> { b | passwordBcrypt : a } -> { b | passwordBcrypt : a }
setPasswordBcrypt value model =
    { model | passwordBcrypt = value }


setQuestion : a -> { b | question : a } -> { b | question : a }
setQuestion value model =
    { model | question = value }


setCertainty : a -> { b | certainty : a } -> { b | certainty : a }
setCertainty value model =
    { model | certainty = value }


setMaximumStakeCents : a -> { b | maximumStakeCents : a } -> { b | maximumStakeCents : a }
setMaximumStakeCents value model =
    { model | maximumStakeCents = value }


setCreatedUnixtime : a -> { b | createdUnixtime : a } -> { b | createdUnixtime : a }
setCreatedUnixtime value model =
    { model | createdUnixtime = value }


setClosesUnixtime : a -> { b | closesUnixtime : a } -> { b | closesUnixtime : a }
setClosesUnixtime value model =
    { model | closesUnixtime = value }


setSpecialRules : a -> { b | specialRules : a } -> { b | specialRules : a }
setSpecialRules value model =
    { model | specialRules = value }


setCreator : a -> { b | creator : a } -> { b | creator : a }
setCreator value model =
    { model | creator = value }


setTrades : a -> { b | trades : a } -> { b | trades : a }
setTrades value model =
    { model | trades = value }


setResolutions : a -> { b | resolutions : a } -> { b | resolutions : a }
setResolutions value model =
    { model | resolutions = value }


setUnixtime : a -> { b | unixtime : a } -> { b | unixtime : a }
setUnixtime value model =
    { model | unixtime = value }


setResolution : a -> { b | resolution : a } -> { b | resolution : a }
setResolution value model =
    { model | resolution = value }


setNotes : a -> { b | notes : a } -> { b | notes : a }
setNotes value model =
    { model | notes = value }


setBettor : a -> { b | bettor : a } -> { b | bettor : a }
setBettor value model =
    { model | bettor = value }


setBettorIsASkeptic : a -> { b | bettorIsASkeptic : a } -> { b | bettorIsASkeptic : a }
setBettorIsASkeptic value model =
    { model | bettorIsASkeptic = value }


setBettorStakeCents : a -> { b | bettorStakeCents : a } -> { b | bettorStakeCents : a }
setBettorStakeCents value model =
    { model | bettorStakeCents = value }


setCreatorStakeCents : a -> { b | creatorStakeCents : a } -> { b | creatorStakeCents : a }
setCreatorStakeCents value model =
    { model | creatorStakeCents = value }


setTransactedUnixtime : a -> { b | transactedUnixtime : a } -> { b | transactedUnixtime : a }
setTransactedUnixtime value model =
    { model | transactedUnixtime = value }


setAuth : a -> { b | auth : a } -> { b | auth : a }
setAuth value model =
    { model | auth = value }


setUsername : a -> { b | username : a } -> { b | username : a }
setUsername value model =
    { model | username = value }


setPassword : a -> { b | password : a } -> { b | password : a }
setPassword value model =
    { model | password = value }


setRegisterUsernameResult : a -> { b | registerUsernameResult : a } -> { b | registerUsernameResult : a }
setRegisterUsernameResult value model =
    { model | registerUsernameResult = value }


setCatchall : a -> { b | catchall : a } -> { b | catchall : a }
setCatchall value model =
    { model | catchall = value }


setUsernameTaken : a -> { b | usernameTaken : a } -> { b | usernameTaken : a }
setUsernameTaken value model =
    { model | usernameTaken = value }


setLogInUsernameResult : a -> { b | logInUsernameResult : a } -> { b | logInUsernameResult : a }
setLogInUsernameResult value model =
    { model | logInUsernameResult = value }


setLow : a -> { b | low : a } -> { b | low : a }
setLow value model =
    { model | low = value }


setHigh : a -> { b | high : a } -> { b | high : a }
setHigh value model =
    { model | high = value }


setPrivacyKind : a -> { b | privacyKind : a } -> { b | privacyKind : a }
setPrivacyKind value model =
    { model | privacyKind = value }


setEmails : a -> { b | emails : a } -> { b | emails : a }
setEmails value model =
    { model | emails = value }


setPrivacy : a -> { b | privacy : a } -> { b | privacy : a }
setPrivacy value model =
    { model | privacy = value }


setOpenSeconds : a -> { b | openSeconds : a } -> { b | openSeconds : a }
setOpenSeconds value model =
    { model | openSeconds = value }


setCreateMarketResult : a -> { b | createMarketResult : a } -> { b | createMarketResult : a }
setCreateMarketResult value model =
    { model | createMarketResult = value }


setMarketId : a -> { b | marketId : a } -> { b | marketId : a }
setMarketId value model =
    { model | marketId = value }


setGetMarketResult : a -> { b | getMarketResult : a } -> { b | getMarketResult : a }
setGetMarketResult value model =
    { model | getMarketResult = value }


setNoSuchMarket : a -> { b | noSuchMarket : a } -> { b | noSuchMarket : a }
setNoSuchMarket value model =
    { model | noSuchMarket = value }


setRemainingStakeCentsVsBelievers : a -> { b | remainingStakeCentsVsBelievers : a } -> { b | remainingStakeCentsVsBelievers : a }
setRemainingStakeCentsVsBelievers value model =
    { model | remainingStakeCentsVsBelievers = value }


setRemainingStakeCentsVsSkeptics : a -> { b | remainingStakeCentsVsSkeptics : a } -> { b | remainingStakeCentsVsSkeptics : a }
setRemainingStakeCentsVsSkeptics value model =
    { model | remainingStakeCentsVsSkeptics = value }


setYourTrades : a -> { b | yourTrades : a } -> { b | yourTrades : a }
setYourTrades value model =
    { model | yourTrades = value }


setDisplayName : a -> { b | displayName : a } -> { b | displayName : a }
setDisplayName value model =
    { model | displayName = value }


setIsSelf : a -> { b | isSelf : a } -> { b | isSelf : a }
setIsSelf value model =
    { model | isSelf = value }


setIsTrusted : a -> { b | isTrusted : a } -> { b | isTrusted : a }
setIsTrusted value model =
    { model | isTrusted = value }


setTrustsYou : a -> { b | trustsYou : a } -> { b | trustsYou : a }
setTrustsYou value model =
    { model | trustsYou = value }


setListMyMarketsResult : a -> { b | listMyMarketsResult : a } -> { b | listMyMarketsResult : a }
setListMyMarketsResult value model =
    { model | listMyMarketsResult = value }


setStakeResult : a -> { b | stakeResult : a } -> { b | stakeResult : a }
setStakeResult value model =
    { model | stakeResult = value }


setResolveResult : a -> { b | resolveResult : a } -> { b | resolveResult : a }
setResolveResult value model =
    { model | resolveResult = value }


setWho : a -> { b | who : a } -> { b | who : a }
setWho value model =
    { model | who = value }


setTrusted : a -> { b | trusted : a } -> { b | trusted : a }
setTrusted value model =
    { model | trusted = value }


setSetTrustedResult : a -> { b | setTrustedResult : a } -> { b | setTrustedResult : a }
setSetTrustedResult value model =
    { model | setTrustedResult = value }


setGetUserResult : a -> { b | getUserResult : a } -> { b | getUserResult : a }
setGetUserResult value model =
    { model | getUserResult = value }


setOldPassword : a -> { b | oldPassword : a } -> { b | oldPassword : a }
setOldPassword value model =
    { model | oldPassword = value }


setNewPassword : a -> { b | newPassword : a } -> { b | newPassword : a }
setNewPassword value model =
    { model | newPassword = value }


setChangePasswordResult : a -> { b | changePasswordResult : a } -> { b | changePasswordResult : a }
setChangePasswordResult value model =
    { model | changePasswordResult = value }
